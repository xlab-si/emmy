// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package protobuf is a generated protocol buffer package.

It is generated from these files:
	messages.proto
	services.proto
	enums.proto

It has these top-level messages:
	Message
	EmptyMsg
	ServiceInfo
	Status
	BigInt
	DoubleBigInt
	PedersenFirst
	PedersenDecommitment
	ECGroupElement
	Pair
	SchnorrProofRandomData
	SchnorrECProofRandomData
	SchnorrProofData
	PseudonymsysNymGenProofRandomData
	PseudonymsysNymGenProofRandomDataEC
	PseudonymsysCACertificate
	PseudonymsysCACertificateEC
	PseudonymsysIssueProofRandomData
	PseudonymsysIssueProofRandomDataEC
	PseudonymsysTranscript
	PseudonymsysTranscriptEC
	PseudonymsysCredential
	PseudonymsysCredentialEC
	PseudonymsysTransferCredentialData
	PseudonymsysTransferCredentialDataEC
	QNRVerifierChallenge
	RepeatedInt
	RepeatedPair
	CSPaillierSecretKey
	CSPaillierPubKey
	CSPaillierOpening
	CSPaillierProofRandomData
	CSPaillierProofData
	SessionKey
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A generic message
type Message struct {
	Schema        SchemaType    `protobuf:"varint,1,opt,name=schema,enum=protobuf.SchemaType" json:"schema,omitempty"`
	SchemaVariant SchemaVariant `protobuf:"varint,2,opt,name=schema_variant,json=schemaVariant,enum=protobuf.SchemaVariant" json:"schema_variant,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Empty
	//	*Message_Bigint
	//	*Message_EcGroupElement
	//	*Message_Status
	//	*Message_PedersenFirst
	//	*Message_PedersenDecommitment
	//	*Message_SchnorrProofData
	//	*Message_SchnorrProofRandomData
	//	*Message_SchnorrEcProofRandomData
	//	*Message_CsPaillierOpening
	//	*Message_CsPaillierProofData
	//	*Message_CsPaillierProofRandomData
	//	*Message_PseudonymsysCaCertificate
	//	*Message_PseudonymsysNymGenProofRandomData
	//	*Message_PseudonymsysIssueProofRandomData
	//	*Message_DoubleBigint
	//	*Message_PseudonymsysTransferCredentialData
	//	*Message_PseudonymsysCaCertificateEc
	//	*Message_PseudonymsysNymGenProofRandomDataEc
	//	*Message_PseudonymsysIssueProofRandomDataEc
	//	*Message_PseudonymsysTransferCredentialDataEc
	//	*Message_QnrVerifierChallenge
	//	*Message_RepeatedInt
	//	*Message_RepeatedPair
	//	*Message_Eint
	//	*Message_SessionKey
	Content       isMessage_Content `protobuf_oneof:"content"`
	ClientId      int32             `protobuf:"varint,28,opt,name=clientId" json:"clientId,omitempty"`
	ProtocolError string            `protobuf:"bytes,29,opt,name=ProtocolError" json:"ProtocolError,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Empty struct {
	Empty *EmptyMsg `protobuf:"bytes,3,opt,name=empty,oneof"`
}
type Message_Bigint struct {
	Bigint *BigInt `protobuf:"bytes,4,opt,name=bigint,oneof"`
}
type Message_EcGroupElement struct {
	EcGroupElement *ECGroupElement `protobuf:"bytes,5,opt,name=ec_group_element,json=ecGroupElement,oneof"`
}
type Message_Status struct {
	Status *Status `protobuf:"bytes,6,opt,name=status,oneof"`
}
type Message_PedersenFirst struct {
	PedersenFirst *PedersenFirst `protobuf:"bytes,7,opt,name=pedersen_first,json=pedersenFirst,oneof"`
}
type Message_PedersenDecommitment struct {
	PedersenDecommitment *PedersenDecommitment `protobuf:"bytes,8,opt,name=pedersen_decommitment,json=pedersenDecommitment,oneof"`
}
type Message_SchnorrProofData struct {
	SchnorrProofData *SchnorrProofData `protobuf:"bytes,9,opt,name=schnorr_proof_data,json=schnorrProofData,oneof"`
}
type Message_SchnorrProofRandomData struct {
	SchnorrProofRandomData *SchnorrProofRandomData `protobuf:"bytes,10,opt,name=schnorr_proof_random_data,json=schnorrProofRandomData,oneof"`
}
type Message_SchnorrEcProofRandomData struct {
	SchnorrEcProofRandomData *SchnorrECProofRandomData `protobuf:"bytes,11,opt,name=schnorr_ec_proof_random_data,json=schnorrEcProofRandomData,oneof"`
}
type Message_CsPaillierOpening struct {
	CsPaillierOpening *CSPaillierOpening `protobuf:"bytes,12,opt,name=cs_paillier_opening,json=csPaillierOpening,oneof"`
}
type Message_CsPaillierProofData struct {
	CsPaillierProofData *CSPaillierProofData `protobuf:"bytes,13,opt,name=cs_paillier_proof_data,json=csPaillierProofData,oneof"`
}
type Message_CsPaillierProofRandomData struct {
	CsPaillierProofRandomData *CSPaillierProofRandomData `protobuf:"bytes,14,opt,name=cs_paillier_proof_random_data,json=csPaillierProofRandomData,oneof"`
}
type Message_PseudonymsysCaCertificate struct {
	PseudonymsysCaCertificate *PseudonymsysCACertificate `protobuf:"bytes,15,opt,name=pseudonymsys_ca_certificate,json=pseudonymsysCaCertificate,oneof"`
}
type Message_PseudonymsysNymGenProofRandomData struct {
	PseudonymsysNymGenProofRandomData *PseudonymsysNymGenProofRandomData `protobuf:"bytes,16,opt,name=pseudonymsys_nym_gen_proof_random_data,json=pseudonymsysNymGenProofRandomData,oneof"`
}
type Message_PseudonymsysIssueProofRandomData struct {
	PseudonymsysIssueProofRandomData *PseudonymsysIssueProofRandomData `protobuf:"bytes,17,opt,name=pseudonymsys_issue_proof_random_data,json=pseudonymsysIssueProofRandomData,oneof"`
}
type Message_DoubleBigint struct {
	DoubleBigint *DoubleBigInt `protobuf:"bytes,18,opt,name=double_bigint,json=doubleBigint,oneof"`
}
type Message_PseudonymsysTransferCredentialData struct {
	PseudonymsysTransferCredentialData *PseudonymsysTransferCredentialData `protobuf:"bytes,19,opt,name=pseudonymsys_transfer_credential_data,json=pseudonymsysTransferCredentialData,oneof"`
}
type Message_PseudonymsysCaCertificateEc struct {
	PseudonymsysCaCertificateEc *PseudonymsysCACertificateEC `protobuf:"bytes,20,opt,name=pseudonymsys_ca_certificate_ec,json=pseudonymsysCaCertificateEc,oneof"`
}
type Message_PseudonymsysNymGenProofRandomDataEc struct {
	PseudonymsysNymGenProofRandomDataEc *PseudonymsysNymGenProofRandomDataEC `protobuf:"bytes,21,opt,name=pseudonymsys_nym_gen_proof_random_data_ec,json=pseudonymsysNymGenProofRandomDataEc,oneof"`
}
type Message_PseudonymsysIssueProofRandomDataEc struct {
	PseudonymsysIssueProofRandomDataEc *PseudonymsysIssueProofRandomDataEC `protobuf:"bytes,22,opt,name=pseudonymsys_issue_proof_random_data_ec,json=pseudonymsysIssueProofRandomDataEc,oneof"`
}
type Message_PseudonymsysTransferCredentialDataEc struct {
	PseudonymsysTransferCredentialDataEc *PseudonymsysTransferCredentialDataEC `protobuf:"bytes,23,opt,name=pseudonymsys_transfer_credential_data_ec,json=pseudonymsysTransferCredentialDataEc,oneof"`
}
type Message_QnrVerifierChallenge struct {
	QnrVerifierChallenge *QNRVerifierChallenge `protobuf:"bytes,24,opt,name=qnr_verifier_challenge,json=qnrVerifierChallenge,oneof"`
}
type Message_RepeatedInt struct {
	RepeatedInt *RepeatedInt `protobuf:"bytes,25,opt,name=repeated_int,json=repeatedInt,oneof"`
}
type Message_RepeatedPair struct {
	RepeatedPair *RepeatedPair `protobuf:"bytes,26,opt,name=repeated_pair,json=repeatedPair,oneof"`
}
type Message_Eint struct {
	Eint int32 `protobuf:"varint,27,opt,name=Eint,oneof"`
}
type Message_SessionKey struct {
	SessionKey *SessionKey `protobuf:"bytes,30,opt,name=SessionKey,oneof"`
}

func (*Message_Empty) isMessage_Content()                                {}
func (*Message_Bigint) isMessage_Content()                               {}
func (*Message_EcGroupElement) isMessage_Content()                       {}
func (*Message_Status) isMessage_Content()                               {}
func (*Message_PedersenFirst) isMessage_Content()                        {}
func (*Message_PedersenDecommitment) isMessage_Content()                 {}
func (*Message_SchnorrProofData) isMessage_Content()                     {}
func (*Message_SchnorrProofRandomData) isMessage_Content()               {}
func (*Message_SchnorrEcProofRandomData) isMessage_Content()             {}
func (*Message_CsPaillierOpening) isMessage_Content()                    {}
func (*Message_CsPaillierProofData) isMessage_Content()                  {}
func (*Message_CsPaillierProofRandomData) isMessage_Content()            {}
func (*Message_PseudonymsysCaCertificate) isMessage_Content()            {}
func (*Message_PseudonymsysNymGenProofRandomData) isMessage_Content()    {}
func (*Message_PseudonymsysIssueProofRandomData) isMessage_Content()     {}
func (*Message_DoubleBigint) isMessage_Content()                         {}
func (*Message_PseudonymsysTransferCredentialData) isMessage_Content()   {}
func (*Message_PseudonymsysCaCertificateEc) isMessage_Content()          {}
func (*Message_PseudonymsysNymGenProofRandomDataEc) isMessage_Content()  {}
func (*Message_PseudonymsysIssueProofRandomDataEc) isMessage_Content()   {}
func (*Message_PseudonymsysTransferCredentialDataEc) isMessage_Content() {}
func (*Message_QnrVerifierChallenge) isMessage_Content()                 {}
func (*Message_RepeatedInt) isMessage_Content()                          {}
func (*Message_RepeatedPair) isMessage_Content()                         {}
func (*Message_Eint) isMessage_Content()                                 {}
func (*Message_SessionKey) isMessage_Content()                           {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetSchema() SchemaType {
	if m != nil {
		return m.Schema
	}
	return SchemaType_PEDERSEN
}

func (m *Message) GetSchemaVariant() SchemaVariant {
	if m != nil {
		return m.SchemaVariant
	}
	return SchemaVariant_SIGMA
}

func (m *Message) GetEmpty() *EmptyMsg {
	if x, ok := m.GetContent().(*Message_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Message) GetBigint() *BigInt {
	if x, ok := m.GetContent().(*Message_Bigint); ok {
		return x.Bigint
	}
	return nil
}

func (m *Message) GetEcGroupElement() *ECGroupElement {
	if x, ok := m.GetContent().(*Message_EcGroupElement); ok {
		return x.EcGroupElement
	}
	return nil
}

func (m *Message) GetStatus() *Status {
	if x, ok := m.GetContent().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Message) GetPedersenFirst() *PedersenFirst {
	if x, ok := m.GetContent().(*Message_PedersenFirst); ok {
		return x.PedersenFirst
	}
	return nil
}

func (m *Message) GetPedersenDecommitment() *PedersenDecommitment {
	if x, ok := m.GetContent().(*Message_PedersenDecommitment); ok {
		return x.PedersenDecommitment
	}
	return nil
}

func (m *Message) GetSchnorrProofData() *SchnorrProofData {
	if x, ok := m.GetContent().(*Message_SchnorrProofData); ok {
		return x.SchnorrProofData
	}
	return nil
}

func (m *Message) GetSchnorrProofRandomData() *SchnorrProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrProofRandomData); ok {
		return x.SchnorrProofRandomData
	}
	return nil
}

func (m *Message) GetSchnorrEcProofRandomData() *SchnorrECProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrEcProofRandomData); ok {
		return x.SchnorrEcProofRandomData
	}
	return nil
}

func (m *Message) GetCsPaillierOpening() *CSPaillierOpening {
	if x, ok := m.GetContent().(*Message_CsPaillierOpening); ok {
		return x.CsPaillierOpening
	}
	return nil
}

func (m *Message) GetCsPaillierProofData() *CSPaillierProofData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofData); ok {
		return x.CsPaillierProofData
	}
	return nil
}

func (m *Message) GetCsPaillierProofRandomData() *CSPaillierProofRandomData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofRandomData); ok {
		return x.CsPaillierProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysCaCertificate() *PseudonymsysCACertificate {
	if x, ok := m.GetContent().(*Message_PseudonymsysCaCertificate); ok {
		return x.PseudonymsysCaCertificate
	}
	return nil
}

func (m *Message) GetPseudonymsysNymGenProofRandomData() *PseudonymsysNymGenProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysNymGenProofRandomData); ok {
		return x.PseudonymsysNymGenProofRandomData
	}
	return nil
}

func (m *Message) GetPseudonymsysIssueProofRandomData() *PseudonymsysIssueProofRandomData {
	if x, ok := m.GetContent().(*Message_PseudonymsysIssueProofRandomData); ok {
		return x.PseudonymsysIssueProofRandomData
	}
	return nil
}

func (m *Message) GetDoubleBigint() *DoubleBigInt {
	if x, ok := m.GetContent().(*Message_DoubleBigint); ok {
		return x.DoubleBigint
	}
	return nil
}

func (m *Message) GetPseudonymsysTransferCredentialData() *PseudonymsysTransferCredentialData {
	if x, ok := m.GetContent().(*Message_PseudonymsysTransferCredentialData); ok {
		return x.PseudonymsysTransferCredentialData
	}
	return nil
}

func (m *Message) GetPseudonymsysCaCertificateEc() *PseudonymsysCACertificateEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysCaCertificateEc); ok {
		return x.PseudonymsysCaCertificateEc
	}
	return nil
}

func (m *Message) GetPseudonymsysNymGenProofRandomDataEc() *PseudonymsysNymGenProofRandomDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysNymGenProofRandomDataEc); ok {
		return x.PseudonymsysNymGenProofRandomDataEc
	}
	return nil
}

func (m *Message) GetPseudonymsysIssueProofRandomDataEc() *PseudonymsysIssueProofRandomDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysIssueProofRandomDataEc); ok {
		return x.PseudonymsysIssueProofRandomDataEc
	}
	return nil
}

func (m *Message) GetPseudonymsysTransferCredentialDataEc() *PseudonymsysTransferCredentialDataEC {
	if x, ok := m.GetContent().(*Message_PseudonymsysTransferCredentialDataEc); ok {
		return x.PseudonymsysTransferCredentialDataEc
	}
	return nil
}

func (m *Message) GetQnrVerifierChallenge() *QNRVerifierChallenge {
	if x, ok := m.GetContent().(*Message_QnrVerifierChallenge); ok {
		return x.QnrVerifierChallenge
	}
	return nil
}

func (m *Message) GetRepeatedInt() *RepeatedInt {
	if x, ok := m.GetContent().(*Message_RepeatedInt); ok {
		return x.RepeatedInt
	}
	return nil
}

func (m *Message) GetRepeatedPair() *RepeatedPair {
	if x, ok := m.GetContent().(*Message_RepeatedPair); ok {
		return x.RepeatedPair
	}
	return nil
}

func (m *Message) GetEint() int32 {
	if x, ok := m.GetContent().(*Message_Eint); ok {
		return x.Eint
	}
	return 0
}

func (m *Message) GetSessionKey() *SessionKey {
	if x, ok := m.GetContent().(*Message_SessionKey); ok {
		return x.SessionKey
	}
	return nil
}

func (m *Message) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

func (m *Message) GetProtocolError() string {
	if m != nil {
		return m.ProtocolError
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Empty)(nil),
		(*Message_Bigint)(nil),
		(*Message_EcGroupElement)(nil),
		(*Message_Status)(nil),
		(*Message_PedersenFirst)(nil),
		(*Message_PedersenDecommitment)(nil),
		(*Message_SchnorrProofData)(nil),
		(*Message_SchnorrProofRandomData)(nil),
		(*Message_SchnorrEcProofRandomData)(nil),
		(*Message_CsPaillierOpening)(nil),
		(*Message_CsPaillierProofData)(nil),
		(*Message_CsPaillierProofRandomData)(nil),
		(*Message_PseudonymsysCaCertificate)(nil),
		(*Message_PseudonymsysNymGenProofRandomData)(nil),
		(*Message_PseudonymsysIssueProofRandomData)(nil),
		(*Message_DoubleBigint)(nil),
		(*Message_PseudonymsysTransferCredentialData)(nil),
		(*Message_PseudonymsysCaCertificateEc)(nil),
		(*Message_PseudonymsysNymGenProofRandomDataEc)(nil),
		(*Message_PseudonymsysIssueProofRandomDataEc)(nil),
		(*Message_PseudonymsysTransferCredentialDataEc)(nil),
		(*Message_QnrVerifierChallenge)(nil),
		(*Message_RepeatedInt)(nil),
		(*Message_RepeatedPair)(nil),
		(*Message_Eint)(nil),
		(*Message_SessionKey)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Message_Bigint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bigint); err != nil {
			return err
		}
	case *Message_EcGroupElement:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcGroupElement); err != nil {
			return err
		}
	case *Message_Status:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Message_PedersenFirst:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenFirst); err != nil {
			return err
		}
	case *Message_PedersenDecommitment:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenDecommitment); err != nil {
			return err
		}
	case *Message_SchnorrProofData:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofData); err != nil {
			return err
		}
	case *Message_SchnorrProofRandomData:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofRandomData); err != nil {
			return err
		}
	case *Message_SchnorrEcProofRandomData:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrEcProofRandomData); err != nil {
			return err
		}
	case *Message_CsPaillierOpening:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierOpening); err != nil {
			return err
		}
	case *Message_CsPaillierProofData:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofData); err != nil {
			return err
		}
	case *Message_CsPaillierProofRandomData:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysCaCertificate:
		b.EncodeVarint(15<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysCaCertificate); err != nil {
			return err
		}
	case *Message_PseudonymsysNymGenProofRandomData:
		b.EncodeVarint(16<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysNymGenProofRandomData); err != nil {
			return err
		}
	case *Message_PseudonymsysIssueProofRandomData:
		b.EncodeVarint(17<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysIssueProofRandomData); err != nil {
			return err
		}
	case *Message_DoubleBigint:
		b.EncodeVarint(18<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.DoubleBigint); err != nil {
			return err
		}
	case *Message_PseudonymsysTransferCredentialData:
		b.EncodeVarint(19<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysTransferCredentialData); err != nil {
			return err
		}
	case *Message_PseudonymsysCaCertificateEc:
		b.EncodeVarint(20<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysCaCertificateEc); err != nil {
			return err
		}
	case *Message_PseudonymsysNymGenProofRandomDataEc:
		b.EncodeVarint(21<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysNymGenProofRandomDataEc); err != nil {
			return err
		}
	case *Message_PseudonymsysIssueProofRandomDataEc:
		b.EncodeVarint(22<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysIssueProofRandomDataEc); err != nil {
			return err
		}
	case *Message_PseudonymsysTransferCredentialDataEc:
		b.EncodeVarint(23<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PseudonymsysTransferCredentialDataEc); err != nil {
			return err
		}
	case *Message_QnrVerifierChallenge:
		b.EncodeVarint(24<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.QnrVerifierChallenge); err != nil {
			return err
		}
	case *Message_RepeatedInt:
		b.EncodeVarint(25<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RepeatedInt); err != nil {
			return err
		}
	case *Message_RepeatedPair:
		b.EncodeVarint(26<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.RepeatedPair); err != nil {
			return err
		}
	case *Message_Eint:
		b.EncodeVarint(27<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Eint))
	case *Message_SessionKey:
		b.EncodeVarint(30<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SessionKey); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // content.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyMsg)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Empty{msg}
		return true, err
	case 4: // content.bigint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Bigint{msg}
		return true, err
	case 5: // content.ec_group_element
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ECGroupElement)
		err := b.DecodeMessage(msg)
		m.Content = &Message_EcGroupElement{msg}
		return true, err
	case 6: // content.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Status{msg}
		return true, err
	case 7: // content.pedersen_first
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenFirst)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenFirst{msg}
		return true, err
	case 8: // content.pedersen_decommitment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenDecommitment)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenDecommitment{msg}
		return true, err
	case 9: // content.schnorr_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofData{msg}
		return true, err
	case 10: // content.schnorr_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofRandomData{msg}
		return true, err
	case 11: // content.schnorr_ec_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrECProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrEcProofRandomData{msg}
		return true, err
	case 12: // content.cs_paillier_opening
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierOpening)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierOpening{msg}
		return true, err
	case 13: // content.cs_paillier_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofData{msg}
		return true, err
	case 14: // content.cs_paillier_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofRandomData{msg}
		return true, err
	case 15: // content.pseudonymsys_ca_certificate
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysCACertificate)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysCaCertificate{msg}
		return true, err
	case 16: // content.pseudonymsys_nym_gen_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysNymGenProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysNymGenProofRandomData{msg}
		return true, err
	case 17: // content.pseudonymsys_issue_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysIssueProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysIssueProofRandomData{msg}
		return true, err
	case 18: // content.double_bigint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(DoubleBigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_DoubleBigint{msg}
		return true, err
	case 19: // content.pseudonymsys_transfer_credential_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysTransferCredentialData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysTransferCredentialData{msg}
		return true, err
	case 20: // content.pseudonymsys_ca_certificate_ec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysCACertificateEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysCaCertificateEc{msg}
		return true, err
	case 21: // content.pseudonymsys_nym_gen_proof_random_data_ec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysNymGenProofRandomDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysNymGenProofRandomDataEc{msg}
		return true, err
	case 22: // content.pseudonymsys_issue_proof_random_data_ec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysIssueProofRandomDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysIssueProofRandomDataEc{msg}
		return true, err
	case 23: // content.pseudonymsys_transfer_credential_data_ec
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PseudonymsysTransferCredentialDataEC)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PseudonymsysTransferCredentialDataEc{msg}
		return true, err
	case 24: // content.qnr_verifier_challenge
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(QNRVerifierChallenge)
		err := b.DecodeMessage(msg)
		m.Content = &Message_QnrVerifierChallenge{msg}
		return true, err
	case 25: // content.repeated_int
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepeatedInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_RepeatedInt{msg}
		return true, err
	case 26: // content.repeated_pair
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(RepeatedPair)
		err := b.DecodeMessage(msg)
		m.Content = &Message_RepeatedPair{msg}
		return true, err
	case 27: // content.Eint
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Content = &Message_Eint{int32(x)}
		return true, err
	case 30: // content.SessionKey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SessionKey)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SessionKey{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Bigint:
		s := proto.Size(x.Bigint)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_EcGroupElement:
		s := proto.Size(x.EcGroupElement)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenFirst:
		s := proto.Size(x.PedersenFirst)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenDecommitment:
		s := proto.Size(x.PedersenDecommitment)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofData:
		s := proto.Size(x.SchnorrProofData)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofRandomData:
		s := proto.Size(x.SchnorrProofRandomData)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrEcProofRandomData:
		s := proto.Size(x.SchnorrEcProofRandomData)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierOpening:
		s := proto.Size(x.CsPaillierOpening)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofData:
		s := proto.Size(x.CsPaillierProofData)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofRandomData:
		s := proto.Size(x.CsPaillierProofRandomData)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysCaCertificate:
		s := proto.Size(x.PseudonymsysCaCertificate)
		n += proto.SizeVarint(15<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysNymGenProofRandomData:
		s := proto.Size(x.PseudonymsysNymGenProofRandomData)
		n += proto.SizeVarint(16<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysIssueProofRandomData:
		s := proto.Size(x.PseudonymsysIssueProofRandomData)
		n += proto.SizeVarint(17<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_DoubleBigint:
		s := proto.Size(x.DoubleBigint)
		n += proto.SizeVarint(18<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysTransferCredentialData:
		s := proto.Size(x.PseudonymsysTransferCredentialData)
		n += proto.SizeVarint(19<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysCaCertificateEc:
		s := proto.Size(x.PseudonymsysCaCertificateEc)
		n += proto.SizeVarint(20<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysNymGenProofRandomDataEc:
		s := proto.Size(x.PseudonymsysNymGenProofRandomDataEc)
		n += proto.SizeVarint(21<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysIssueProofRandomDataEc:
		s := proto.Size(x.PseudonymsysIssueProofRandomDataEc)
		n += proto.SizeVarint(22<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PseudonymsysTransferCredentialDataEc:
		s := proto.Size(x.PseudonymsysTransferCredentialDataEc)
		n += proto.SizeVarint(23<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_QnrVerifierChallenge:
		s := proto.Size(x.QnrVerifierChallenge)
		n += proto.SizeVarint(24<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RepeatedInt:
		s := proto.Size(x.RepeatedInt)
		n += proto.SizeVarint(25<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_RepeatedPair:
		s := proto.Size(x.RepeatedPair)
		n += proto.SizeVarint(26<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Eint:
		n += proto.SizeVarint(27<<3 | proto.WireVarint)
		n += proto.SizeVarint(uint64(x.Eint))
	case *Message_SessionKey:
		s := proto.Size(x.SessionKey)
		n += proto.SizeVarint(30<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type ServiceInfo struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
	Provider    string `protobuf:"bytes,3,opt,name=provider" json:"provider,omitempty"`
}

func (m *ServiceInfo) Reset()                    { *m = ServiceInfo{} }
func (m *ServiceInfo) String() string            { return proto.CompactTextString(m) }
func (*ServiceInfo) ProtoMessage()               {}
func (*ServiceInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ServiceInfo) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ServiceInfo) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *ServiceInfo) GetProvider() string {
	if m != nil {
		return m.Provider
	}
	return ""
}

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BigInt) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

type DoubleBigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	X2 []byte `protobuf:"bytes,2,opt,name=X2,proto3" json:"X2,omitempty"`
}

func (m *DoubleBigInt) Reset()                    { *m = DoubleBigInt{} }
func (m *DoubleBigInt) String() string            { return proto.CompactTextString(m) }
func (*DoubleBigInt) ProtoMessage()               {}
func (*DoubleBigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *DoubleBigInt) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *DoubleBigInt) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

type PedersenFirst struct {
	H []byte `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
}

func (m *PedersenFirst) Reset()                    { *m = PedersenFirst{} }
func (m *PedersenFirst) String() string            { return proto.CompactTextString(m) }
func (*PedersenFirst) ProtoMessage()               {}
func (*PedersenFirst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *PedersenFirst) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

type PedersenDecommitment struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *PedersenDecommitment) Reset()                    { *m = PedersenDecommitment{} }
func (m *PedersenDecommitment) String() string            { return proto.CompactTextString(m) }
func (*PedersenDecommitment) ProtoMessage()               {}
func (*PedersenDecommitment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *PedersenDecommitment) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PedersenDecommitment) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ECGroupElement) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECGroupElement) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type Pair struct {
	A []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *Pair) Reset()                    { *m = Pair{} }
func (m *Pair) String() string            { return proto.CompactTextString(m) }
func (*Pair) ProtoMessage()               {}
func (*Pair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *Pair) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *Pair) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofRandomData struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	A []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *SchnorrProofRandomData) Reset()                    { *m = SchnorrProofRandomData{} }
func (m *SchnorrProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofRandomData) ProtoMessage()               {}
func (*SchnorrProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *SchnorrProofRandomData) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrProofRandomData) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrProofRandomData) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrECProofRandomData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *SchnorrECProofRandomData) Reset()                    { *m = SchnorrECProofRandomData{} }
func (m *SchnorrECProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrECProofRandomData) ProtoMessage()               {}
func (*SchnorrECProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *SchnorrECProofRandomData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofData struct {
	Z        []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
	Trapdoor []byte `protobuf:"bytes,2,opt,name=Trapdoor,proto3" json:"Trapdoor,omitempty"`
}

func (m *SchnorrProofData) Reset()                    { *m = SchnorrProofData{} }
func (m *SchnorrProofData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofData) ProtoMessage()               {}
func (*SchnorrProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *SchnorrProofData) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *SchnorrProofData) GetTrapdoor() []byte {
	if m != nil {
		return m.Trapdoor
	}
	return nil
}

type PseudonymsysNymGenProofRandomData struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
	A1 []byte `protobuf:"bytes,2,opt,name=A1,proto3" json:"A1,omitempty"`
	B1 []byte `protobuf:"bytes,3,opt,name=B1,proto3" json:"B1,omitempty"`
	X2 []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	A2 []byte `protobuf:"bytes,5,opt,name=A2,proto3" json:"A2,omitempty"`
	B2 []byte `protobuf:"bytes,6,opt,name=B2,proto3" json:"B2,omitempty"`
	R  []byte `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S  []byte `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	RegKey string `protobuf:"bytes,9,opt,name=RegKey" json:"RegKey,omitempty"`
}

func (m *PseudonymsysNymGenProofRandomData) Reset()         { *m = PseudonymsysNymGenProofRandomData{} }
func (m *PseudonymsysNymGenProofRandomData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysNymGenProofRandomData) ProtoMessage()    {}
func (*PseudonymsysNymGenProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{13}
}

func (m *PseudonymsysNymGenProofRandomData) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetA1() []byte {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetB1() []byte {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetA2() []byte {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetB2() []byte {
	if m != nil {
		return m.B2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomData) GetRegKey() string {
	if m != nil {
		return m.RegKey
	}
	return ""
}

type PseudonymsysNymGenProofRandomDataEC struct {
	X1 *ECGroupElement `protobuf:"bytes,1,opt,name=X1" json:"X1,omitempty"`
	A1 *ECGroupElement `protobuf:"bytes,2,opt,name=A1" json:"A1,omitempty"`
	B1 *ECGroupElement `protobuf:"bytes,3,opt,name=B1" json:"B1,omitempty"`
	X2 *ECGroupElement `protobuf:"bytes,4,opt,name=X2" json:"X2,omitempty"`
	A2 *ECGroupElement `protobuf:"bytes,5,opt,name=A2" json:"A2,omitempty"`
	B2 *ECGroupElement `protobuf:"bytes,6,opt,name=B2" json:"B2,omitempty"`
	R  []byte          `protobuf:"bytes,7,opt,name=R,proto3" json:"R,omitempty"`
	S  []byte          `protobuf:"bytes,8,opt,name=S,proto3" json:"S,omitempty"`
	RegKey string `protobuf:"bytes,9,opt,name=RegKey" json:"RegKey,omitempty"`
}

func (m *PseudonymsysNymGenProofRandomDataEC) Reset()         { *m = PseudonymsysNymGenProofRandomDataEC{} }
func (m *PseudonymsysNymGenProofRandomDataEC) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysNymGenProofRandomDataEC) ProtoMessage()    {}
func (*PseudonymsysNymGenProofRandomDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{14}
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetA1() *ECGroupElement {
	if m != nil {
		return m.A1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetB1() *ECGroupElement {
	if m != nil {
		return m.B1
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetA2() *ECGroupElement {
	if m != nil {
		return m.A2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetB2() *ECGroupElement {
	if m != nil {
		return m.B2
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

func (m *PseudonymsysNymGenProofRandomDataEC) GetRegKey() string {
	if m != nil {
		return m.RegKey
	}
	return ""
}

type PseudonymsysCACertificate struct {
	BlindedA []byte `protobuf:"bytes,1,opt,name=BlindedA,proto3" json:"BlindedA,omitempty"`
	BlindedB []byte `protobuf:"bytes,2,opt,name=BlindedB,proto3" json:"BlindedB,omitempty"`
	R        []byte `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysCACertificate) Reset()                    { *m = PseudonymsysCACertificate{} }
func (m *PseudonymsysCACertificate) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCACertificate) ProtoMessage()               {}
func (*PseudonymsysCACertificate) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *PseudonymsysCACertificate) GetBlindedA() []byte {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetBlindedB() []byte {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysCACertificate) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PseudonymsysCACertificateEC struct {
	BlindedA *ECGroupElement `protobuf:"bytes,1,opt,name=BlindedA" json:"BlindedA,omitempty"`
	BlindedB *ECGroupElement `protobuf:"bytes,2,opt,name=BlindedB" json:"BlindedB,omitempty"`
	R        []byte          `protobuf:"bytes,3,opt,name=R,proto3" json:"R,omitempty"`
	S        []byte          `protobuf:"bytes,4,opt,name=S,proto3" json:"S,omitempty"`
}

func (m *PseudonymsysCACertificateEC) Reset()                    { *m = PseudonymsysCACertificateEC{} }
func (m *PseudonymsysCACertificateEC) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCACertificateEC) ProtoMessage()               {}
func (*PseudonymsysCACertificateEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *PseudonymsysCACertificateEC) GetBlindedA() *ECGroupElement {
	if m != nil {
		return m.BlindedA
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetBlindedB() *ECGroupElement {
	if m != nil {
		return m.BlindedB
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

func (m *PseudonymsysCACertificateEC) GetS() []byte {
	if m != nil {
		return m.S
	}
	return nil
}

type PseudonymsysIssueProofRandomData struct {
	X11 []byte `protobuf:"bytes,1,opt,name=X11,proto3" json:"X11,omitempty"`
	X12 []byte `protobuf:"bytes,2,opt,name=X12,proto3" json:"X12,omitempty"`
	X21 []byte `protobuf:"bytes,3,opt,name=X21,proto3" json:"X21,omitempty"`
	X22 []byte `protobuf:"bytes,4,opt,name=X22,proto3" json:"X22,omitempty"`
	A   []byte `protobuf:"bytes,5,opt,name=A,proto3" json:"A,omitempty"`
	B   []byte `protobuf:"bytes,6,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *PseudonymsysIssueProofRandomData) Reset()         { *m = PseudonymsysIssueProofRandomData{} }
func (m *PseudonymsysIssueProofRandomData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysIssueProofRandomData) ProtoMessage()    {}
func (*PseudonymsysIssueProofRandomData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

func (m *PseudonymsysIssueProofRandomData) GetX11() []byte {
	if m != nil {
		return m.X11
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX12() []byte {
	if m != nil {
		return m.X12
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX21() []byte {
	if m != nil {
		return m.X21
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetX22() []byte {
	if m != nil {
		return m.X22
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomData) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type PseudonymsysIssueProofRandomDataEC struct {
	X11 *ECGroupElement `protobuf:"bytes,1,opt,name=X11" json:"X11,omitempty"`
	X12 *ECGroupElement `protobuf:"bytes,2,opt,name=X12" json:"X12,omitempty"`
	X21 *ECGroupElement `protobuf:"bytes,3,opt,name=X21" json:"X21,omitempty"`
	X22 *ECGroupElement `protobuf:"bytes,4,opt,name=X22" json:"X22,omitempty"`
	A   *ECGroupElement `protobuf:"bytes,5,opt,name=A" json:"A,omitempty"`
	B   *ECGroupElement `protobuf:"bytes,6,opt,name=B" json:"B,omitempty"`
}

func (m *PseudonymsysIssueProofRandomDataEC) Reset()         { *m = PseudonymsysIssueProofRandomDataEC{} }
func (m *PseudonymsysIssueProofRandomDataEC) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysIssueProofRandomDataEC) ProtoMessage()    {}
func (*PseudonymsysIssueProofRandomDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{18}
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX11() *ECGroupElement {
	if m != nil {
		return m.X11
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX12() *ECGroupElement {
	if m != nil {
		return m.X12
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX21() *ECGroupElement {
	if m != nil {
		return m.X21
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetX22() *ECGroupElement {
	if m != nil {
		return m.X22
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysIssueProofRandomDataEC) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type PseudonymsysTranscript struct {
	A      []byte `protobuf:"bytes,1,opt,name=A,proto3" json:"A,omitempty"`
	B      []byte `protobuf:"bytes,2,opt,name=B,proto3" json:"B,omitempty"`
	Hash   []byte `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *PseudonymsysTranscript) Reset()                    { *m = PseudonymsysTranscript{} }
func (m *PseudonymsysTranscript) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysTranscript) ProtoMessage()               {}
func (*PseudonymsysTranscript) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *PseudonymsysTranscript) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysTranscript) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *PseudonymsysTranscript) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PseudonymsysTranscript) GetZAlpha() []byte {
	if m != nil {
		return m.ZAlpha
	}
	return nil
}

type PseudonymsysTranscriptEC struct {
	A      *ECGroupElement `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B      *ECGroupElement `protobuf:"bytes,2,opt,name=B" json:"B,omitempty"`
	Hash   []byte          `protobuf:"bytes,3,opt,name=Hash,proto3" json:"Hash,omitempty"`
	ZAlpha []byte          `protobuf:"bytes,4,opt,name=ZAlpha,proto3" json:"ZAlpha,omitempty"`
}

func (m *PseudonymsysTranscriptEC) Reset()                    { *m = PseudonymsysTranscriptEC{} }
func (m *PseudonymsysTranscriptEC) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysTranscriptEC) ProtoMessage()               {}
func (*PseudonymsysTranscriptEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *PseudonymsysTranscriptEC) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *PseudonymsysTranscriptEC) GetZAlpha() []byte {
	if m != nil {
		return m.ZAlpha
	}
	return nil
}

type PseudonymsysCredential struct {
	SmallAToGamma []byte                  `protobuf:"bytes,1,opt,name=SmallAToGamma,proto3" json:"SmallAToGamma,omitempty"`
	SmallBToGamma []byte                  `protobuf:"bytes,2,opt,name=SmallBToGamma,proto3" json:"SmallBToGamma,omitempty"`
	AToGamma      []byte                  `protobuf:"bytes,3,opt,name=AToGamma,proto3" json:"AToGamma,omitempty"`
	BToGamma      []byte                  `protobuf:"bytes,4,opt,name=BToGamma,proto3" json:"BToGamma,omitempty"`
	T1            *PseudonymsysTranscript `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *PseudonymsysTranscript `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *PseudonymsysCredential) Reset()                    { *m = PseudonymsysCredential{} }
func (m *PseudonymsysCredential) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCredential) ProtoMessage()               {}
func (*PseudonymsysCredential) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *PseudonymsysCredential) GetSmallAToGamma() []byte {
	if m != nil {
		return m.SmallAToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetSmallBToGamma() []byte {
	if m != nil {
		return m.SmallBToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetAToGamma() []byte {
	if m != nil {
		return m.AToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetBToGamma() []byte {
	if m != nil {
		return m.BToGamma
	}
	return nil
}

func (m *PseudonymsysCredential) GetT1() *PseudonymsysTranscript {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *PseudonymsysCredential) GetT2() *PseudonymsysTranscript {
	if m != nil {
		return m.T2
	}
	return nil
}

type PseudonymsysCredentialEC struct {
	SmallAToGamma *ECGroupElement           `protobuf:"bytes,1,opt,name=SmallAToGamma" json:"SmallAToGamma,omitempty"`
	SmallBToGamma *ECGroupElement           `protobuf:"bytes,2,opt,name=SmallBToGamma" json:"SmallBToGamma,omitempty"`
	AToGamma      *ECGroupElement           `protobuf:"bytes,3,opt,name=AToGamma" json:"AToGamma,omitempty"`
	BToGamma      *ECGroupElement           `protobuf:"bytes,4,opt,name=BToGamma" json:"BToGamma,omitempty"`
	T1            *PseudonymsysTranscriptEC `protobuf:"bytes,5,opt,name=T1" json:"T1,omitempty"`
	T2            *PseudonymsysTranscriptEC `protobuf:"bytes,6,opt,name=T2" json:"T2,omitempty"`
}

func (m *PseudonymsysCredentialEC) Reset()                    { *m = PseudonymsysCredentialEC{} }
func (m *PseudonymsysCredentialEC) String() string            { return proto.CompactTextString(m) }
func (*PseudonymsysCredentialEC) ProtoMessage()               {}
func (*PseudonymsysCredentialEC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *PseudonymsysCredentialEC) GetSmallAToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallAToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetSmallBToGamma() *ECGroupElement {
	if m != nil {
		return m.SmallBToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetAToGamma() *ECGroupElement {
	if m != nil {
		return m.AToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetBToGamma() *ECGroupElement {
	if m != nil {
		return m.BToGamma
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetT1() *PseudonymsysTranscriptEC {
	if m != nil {
		return m.T1
	}
	return nil
}

func (m *PseudonymsysCredentialEC) GetT2() *PseudonymsysTranscriptEC {
	if m != nil {
		return m.T2
	}
	return nil
}

type PseudonymsysTransferCredentialData struct {
	OrgName    string                  `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1         []byte                  `protobuf:"bytes,2,opt,name=X1,proto3" json:"X1,omitempty"`
	X2         []byte                  `protobuf:"bytes,3,opt,name=X2,proto3" json:"X2,omitempty"`
	NymA       []byte                  `protobuf:"bytes,4,opt,name=NymA,proto3" json:"NymA,omitempty"`
	NymB       []byte                  `protobuf:"bytes,5,opt,name=NymB,proto3" json:"NymB,omitempty"`
	Credential *PseudonymsysCredential `protobuf:"bytes,6,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *PseudonymsysTransferCredentialData) Reset()         { *m = PseudonymsysTransferCredentialData{} }
func (m *PseudonymsysTransferCredentialData) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysTransferCredentialData) ProtoMessage()    {}
func (*PseudonymsysTransferCredentialData) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{23}
}

func (m *PseudonymsysTransferCredentialData) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *PseudonymsysTransferCredentialData) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetNymA() []byte {
	if m != nil {
		return m.NymA
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetNymB() []byte {
	if m != nil {
		return m.NymB
	}
	return nil
}

func (m *PseudonymsysTransferCredentialData) GetCredential() *PseudonymsysCredential {
	if m != nil {
		return m.Credential
	}
	return nil
}

type PseudonymsysTransferCredentialDataEC struct {
	OrgName    string                    `protobuf:"bytes,1,opt,name=OrgName" json:"OrgName,omitempty"`
	X1         *ECGroupElement           `protobuf:"bytes,2,opt,name=X1" json:"X1,omitempty"`
	X2         *ECGroupElement           `protobuf:"bytes,3,opt,name=X2" json:"X2,omitempty"`
	NymA       *ECGroupElement           `protobuf:"bytes,4,opt,name=NymA" json:"NymA,omitempty"`
	NymB       *ECGroupElement           `protobuf:"bytes,5,opt,name=NymB" json:"NymB,omitempty"`
	Credential *PseudonymsysCredentialEC `protobuf:"bytes,6,opt,name=Credential" json:"Credential,omitempty"`
}

func (m *PseudonymsysTransferCredentialDataEC) Reset()         { *m = PseudonymsysTransferCredentialDataEC{} }
func (m *PseudonymsysTransferCredentialDataEC) String() string { return proto.CompactTextString(m) }
func (*PseudonymsysTransferCredentialDataEC) ProtoMessage()    {}
func (*PseudonymsysTransferCredentialDataEC) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{24}
}

func (m *PseudonymsysTransferCredentialDataEC) GetOrgName() string {
	if m != nil {
		return m.OrgName
	}
	return ""
}

func (m *PseudonymsysTransferCredentialDataEC) GetX1() *ECGroupElement {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetX2() *ECGroupElement {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetNymA() *ECGroupElement {
	if m != nil {
		return m.NymA
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetNymB() *ECGroupElement {
	if m != nil {
		return m.NymB
	}
	return nil
}

func (m *PseudonymsysTransferCredentialDataEC) GetCredential() *PseudonymsysCredentialEC {
	if m != nil {
		return m.Credential
	}
	return nil
}

type QNRVerifierChallenge struct {
	W     []byte  `protobuf:"bytes,1,opt,name=W,proto3" json:"W,omitempty"`
	Pairs []*Pair `protobuf:"bytes,2,rep,name=Pairs" json:"Pairs,omitempty"`
}

func (m *QNRVerifierChallenge) Reset()                    { *m = QNRVerifierChallenge{} }
func (m *QNRVerifierChallenge) String() string            { return proto.CompactTextString(m) }
func (*QNRVerifierChallenge) ProtoMessage()               {}
func (*QNRVerifierChallenge) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *QNRVerifierChallenge) GetW() []byte {
	if m != nil {
		return m.W
	}
	return nil
}

func (m *QNRVerifierChallenge) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type RepeatedInt struct {
	Ints []int32 `protobuf:"varint,1,rep,packed,name=Ints" json:"Ints,omitempty"`
}

func (m *RepeatedInt) Reset()                    { *m = RepeatedInt{} }
func (m *RepeatedInt) String() string            { return proto.CompactTextString(m) }
func (*RepeatedInt) ProtoMessage()               {}
func (*RepeatedInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *RepeatedInt) GetInts() []int32 {
	if m != nil {
		return m.Ints
	}
	return nil
}

type RepeatedPair struct {
	Pairs []*Pair `protobuf:"bytes,1,rep,name=Pairs" json:"Pairs,omitempty"`
}

func (m *RepeatedPair) Reset()                    { *m = RepeatedPair{} }
func (m *RepeatedPair) String() string            { return proto.CompactTextString(m) }
func (*RepeatedPair) ProtoMessage()               {}
func (*RepeatedPair) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *RepeatedPair) GetPairs() []*Pair {
	if m != nil {
		return m.Pairs
	}
	return nil
}

type CSPaillierSecretKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	X1                   []byte `protobuf:"bytes,3,opt,name=X1,proto3" json:"X1,omitempty"`
	X2                   []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	X3                   []byte `protobuf:"bytes,5,opt,name=X3,proto3" json:"X3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierSecretKey) Reset()                    { *m = CSPaillierSecretKey{} }
func (m *CSPaillierSecretKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierSecretKey) ProtoMessage()               {}
func (*CSPaillierSecretKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *CSPaillierSecretKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierSecretKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX3() []byte {
	if m != nil {
		return m.X3
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierSecretKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type CSPaillierPubKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	Y1                   []byte `protobuf:"bytes,3,opt,name=Y1,proto3" json:"Y1,omitempty"`
	Y2                   []byte `protobuf:"bytes,4,opt,name=Y2,proto3" json:"Y2,omitempty"`
	Y3                   []byte `protobuf:"bytes,5,opt,name=Y3,proto3" json:"Y3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierPubKey) Reset()                    { *m = CSPaillierPubKey{} }
func (m *CSPaillierPubKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierPubKey) ProtoMessage()               {}
func (*CSPaillierPubKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CSPaillierPubKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierPubKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierPubKey) GetY1() []byte {
	if m != nil {
		return m.Y1
	}
	return nil
}

func (m *CSPaillierPubKey) GetY2() []byte {
	if m != nil {
		return m.Y2
	}
	return nil
}

func (m *CSPaillierPubKey) GetY3() []byte {
	if m != nil {
		return m.Y3
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierPubKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierPubKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type CSPaillierOpening struct {
	U     []byte `protobuf:"bytes,1,opt,name=U,proto3" json:"U,omitempty"`
	E     []byte `protobuf:"bytes,2,opt,name=E,proto3" json:"E,omitempty"`
	V     []byte `protobuf:"bytes,3,opt,name=V,proto3" json:"V,omitempty"`
	Delta []byte `protobuf:"bytes,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
	Label []byte `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	L     []byte `protobuf:"bytes,6,opt,name=L,proto3" json:"L,omitempty"`
}

func (m *CSPaillierOpening) Reset()                    { *m = CSPaillierOpening{} }
func (m *CSPaillierOpening) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierOpening) ProtoMessage()               {}
func (*CSPaillierOpening) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *CSPaillierOpening) GetU() []byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *CSPaillierOpening) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CSPaillierOpening) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *CSPaillierOpening) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *CSPaillierOpening) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *CSPaillierOpening) GetL() []byte {
	if m != nil {
		return m.L
	}
	return nil
}

type CSPaillierProofRandomData struct {
	U1     []byte `protobuf:"bytes,1,opt,name=U1,proto3" json:"U1,omitempty"`
	E1     []byte `protobuf:"bytes,2,opt,name=E1,proto3" json:"E1,omitempty"`
	V1     []byte `protobuf:"bytes,3,opt,name=V1,proto3" json:"V1,omitempty"`
	Delta1 []byte `protobuf:"bytes,4,opt,name=Delta1,proto3" json:"Delta1,omitempty"`
	L1     []byte `protobuf:"bytes,5,opt,name=L1,proto3" json:"L1,omitempty"`
}

func (m *CSPaillierProofRandomData) Reset()                    { *m = CSPaillierProofRandomData{} }
func (m *CSPaillierProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofRandomData) ProtoMessage()               {}
func (*CSPaillierProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CSPaillierProofRandomData) GetU1() []byte {
	if m != nil {
		return m.U1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetE1() []byte {
	if m != nil {
		return m.E1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetV1() []byte {
	if m != nil {
		return m.V1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetDelta1() []byte {
	if m != nil {
		return m.Delta1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetL1() []byte {
	if m != nil {
		return m.L1
	}
	return nil
}

type CSPaillierProofData struct {
	RTilde      []byte `protobuf:"bytes,1,opt,name=RTilde,proto3" json:"RTilde,omitempty"`
	RTildeIsNeg bool   `protobuf:"varint,2,opt,name=RTildeIsNeg" json:"RTildeIsNeg,omitempty"`
	STilde      []byte `protobuf:"bytes,3,opt,name=STilde,proto3" json:"STilde,omitempty"`
	STildeIsNeg bool   `protobuf:"varint,4,opt,name=STildeIsNeg" json:"STildeIsNeg,omitempty"`
	MTilde      []byte `protobuf:"bytes,5,opt,name=MTilde,proto3" json:"MTilde,omitempty"`
	MTildeIsNeg bool   `protobuf:"varint,6,opt,name=MTildeIsNeg" json:"MTildeIsNeg,omitempty"`
}

func (m *CSPaillierProofData) Reset()                    { *m = CSPaillierProofData{} }
func (m *CSPaillierProofData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofData) ProtoMessage()               {}
func (*CSPaillierProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *CSPaillierProofData) GetRTilde() []byte {
	if m != nil {
		return m.RTilde
	}
	return nil
}

func (m *CSPaillierProofData) GetRTildeIsNeg() bool {
	if m != nil {
		return m.RTildeIsNeg
	}
	return false
}

func (m *CSPaillierProofData) GetSTilde() []byte {
	if m != nil {
		return m.STilde
	}
	return nil
}

func (m *CSPaillierProofData) GetSTildeIsNeg() bool {
	if m != nil {
		return m.STildeIsNeg
	}
	return false
}

func (m *CSPaillierProofData) GetMTilde() []byte {
	if m != nil {
		return m.MTilde
	}
	return nil
}

func (m *CSPaillierProofData) GetMTildeIsNeg() bool {
	if m != nil {
		return m.MTildeIsNeg
	}
	return false
}

type SessionKey struct {
	Value string `protobuf:"bytes,1,opt,name=value" json:"value,omitempty"`
}

func (m *SessionKey) Reset()                    { *m = SessionKey{} }
func (m *SessionKey) String() string            { return proto.CompactTextString(m) }
func (*SessionKey) ProtoMessage()               {}
func (*SessionKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *SessionKey) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func init() {
	proto.RegisterType((*Message)(nil), "protobuf.Message")
	proto.RegisterType((*EmptyMsg)(nil), "protobuf.EmptyMsg")
	proto.RegisterType((*ServiceInfo)(nil), "protobuf.ServiceInfo")
	proto.RegisterType((*Status)(nil), "protobuf.Status")
	proto.RegisterType((*BigInt)(nil), "protobuf.BigInt")
	proto.RegisterType((*DoubleBigInt)(nil), "protobuf.DoubleBigInt")
	proto.RegisterType((*PedersenFirst)(nil), "protobuf.PedersenFirst")
	proto.RegisterType((*PedersenDecommitment)(nil), "protobuf.PedersenDecommitment")
	proto.RegisterType((*ECGroupElement)(nil), "protobuf.ECGroupElement")
	proto.RegisterType((*Pair)(nil), "protobuf.Pair")
	proto.RegisterType((*SchnorrProofRandomData)(nil), "protobuf.SchnorrProofRandomData")
	proto.RegisterType((*SchnorrECProofRandomData)(nil), "protobuf.SchnorrECProofRandomData")
	proto.RegisterType((*SchnorrProofData)(nil), "protobuf.SchnorrProofData")
	proto.RegisterType((*PseudonymsysNymGenProofRandomData)(nil), "protobuf.PseudonymsysNymGenProofRandomData")
	proto.RegisterType((*PseudonymsysNymGenProofRandomDataEC)(nil), "protobuf.PseudonymsysNymGenProofRandomDataEC")
	proto.RegisterType((*PseudonymsysCACertificate)(nil), "protobuf.PseudonymsysCACertificate")
	proto.RegisterType((*PseudonymsysCACertificateEC)(nil), "protobuf.PseudonymsysCACertificateEC")
	proto.RegisterType((*PseudonymsysIssueProofRandomData)(nil), "protobuf.PseudonymsysIssueProofRandomData")
	proto.RegisterType((*PseudonymsysIssueProofRandomDataEC)(nil), "protobuf.PseudonymsysIssueProofRandomDataEC")
	proto.RegisterType((*PseudonymsysTranscript)(nil), "protobuf.PseudonymsysTranscript")
	proto.RegisterType((*PseudonymsysTranscriptEC)(nil), "protobuf.PseudonymsysTranscriptEC")
	proto.RegisterType((*PseudonymsysCredential)(nil), "protobuf.PseudonymsysCredential")
	proto.RegisterType((*PseudonymsysCredentialEC)(nil), "protobuf.PseudonymsysCredentialEC")
	proto.RegisterType((*PseudonymsysTransferCredentialData)(nil), "protobuf.PseudonymsysTransferCredentialData")
	proto.RegisterType((*PseudonymsysTransferCredentialDataEC)(nil), "protobuf.PseudonymsysTransferCredentialDataEC")
	proto.RegisterType((*QNRVerifierChallenge)(nil), "protobuf.QNRVerifierChallenge")
	proto.RegisterType((*RepeatedInt)(nil), "protobuf.RepeatedInt")
	proto.RegisterType((*RepeatedPair)(nil), "protobuf.RepeatedPair")
	proto.RegisterType((*CSPaillierSecretKey)(nil), "protobuf.CSPaillierSecretKey")
	proto.RegisterType((*CSPaillierPubKey)(nil), "protobuf.CSPaillierPubKey")
	proto.RegisterType((*CSPaillierOpening)(nil), "protobuf.CSPaillierOpening")
	proto.RegisterType((*CSPaillierProofRandomData)(nil), "protobuf.CSPaillierProofRandomData")
	proto.RegisterType((*CSPaillierProofData)(nil), "protobuf.CSPaillierProofData")
	proto.RegisterType((*SessionKey)(nil), "protobuf.SessionKey")
}

func init() { proto.RegisterFile("messages.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2068 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x58, 0x4f, 0x73, 0x1b, 0x49,
	0x15, 0x47, 0xb2, 0xad, 0xd8, 0x6d, 0xd9, 0x38, 0x6d, 0xc7, 0x3b, 0x8e, 0x37, 0x29, 0x67, 0x92,
	0x0d, 0x26, 0x18, 0x17, 0x52, 0x52, 0x1c, 0x28, 0x48, 0xad, 0x24, 0x0b, 0xdb, 0x1b, 0xdb, 0xeb,
	0x1d, 0xd9, 0x5e, 0x3b, 0x55, 0x94, 0x18, 0x8f, 0xda, 0xca, 0x54, 0x49, 0x33, 0x62, 0x46, 0x32,
	0xe5, 0x2a, 0x0e, 0x4b, 0x51, 0x05, 0x9c, 0x39, 0x70, 0xe1, 0xc0, 0x05, 0xbe, 0x01, 0x57, 0x4e,
	0x5c, 0xf8, 0x08, 0x54, 0xf1, 0x1d, 0xf8, 0x0c, 0xbc, 0x7e, 0xdd, 0x3d, 0xd3, 0x23, 0x8d, 0x67,
	0x94, 0xf3, 0x9e, 0xa6, 0xdf, 0xeb, 0xdf, 0xfb, 0xd3, 0xaf, 0x5f, 0xbf, 0x79, 0xdd, 0x64, 0xb9,
	0xcf, 0xc2, 0xd0, 0xee, 0xb2, 0x70, 0x77, 0x10, 0xf8, 0x43, 0x9f, 0xce, 0xe3, 0xe7, 0x7a, 0x74,
	0xf3, 0x78, 0x91, 0x79, 0xa3, 0xbe, 0x64, 0x9b, 0x7f, 0x59, 0x25, 0x0f, 0x8e, 0x05, 0x92, 0xee,
	0x90, 0x52, 0xe8, 0x7c, 0x60, 0x7d, 0xdb, 0x28, 0x6c, 0x15, 0xb6, 0x97, 0xab, 0x6b, 0xbb, 0x4a,
	0x66, 0xb7, 0x85, 0xfc, 0xb3, 0xbb, 0x01, 0xb3, 0x24, 0x86, 0xbe, 0x25, 0xcb, 0x62, 0xd4, 0xbe,
	0xb5, 0x03, 0xd7, 0xf6, 0x86, 0x46, 0x11, 0xa5, 0x3e, 0x19, 0x97, 0xba, 0x10, 0xd3, 0xd6, 0x52,
	0xa8, 0x93, 0xf4, 0x15, 0x99, 0x63, 0xfd, 0xc1, 0xf0, 0xce, 0x98, 0x01, 0xb1, 0xc5, 0x2a, 0x8d,
	0xc5, 0x9a, 0x9c, 0x7d, 0x1c, 0x76, 0x0f, 0xbe, 0x63, 0x09, 0x08, 0x60, 0x4b, 0xd7, 0x6e, 0xd7,
	0x05, 0x1b, 0xb3, 0x08, 0x5e, 0x89, 0xc1, 0x75, 0xb7, 0x7b, 0xe8, 0x0d, 0x01, 0x2a, 0x11, 0x74,
	0x8f, 0xac, 0x30, 0xa7, 0xdd, 0x0d, 0xfc, 0xd1, 0xa0, 0xcd, 0x7a, 0xac, 0xcf, 0x40, 0x6a, 0x0e,
	0xa5, 0x0c, 0xcd, 0x44, 0x63, 0x9f, 0x03, 0x9a, 0x62, 0x1e, 0xa4, 0x97, 0x99, 0xa3, 0x73, 0xb8,
	0xc5, 0x70, 0x68, 0x0f, 0x47, 0xa1, 0x51, 0x1a, 0xb7, 0xd8, 0x42, 0x3e, 0xb7, 0x28, 0x10, 0xf4,
	0x73, 0xb2, 0x3c, 0x60, 0x1d, 0x16, 0x84, 0xcc, 0x6b, 0xdf, 0xb8, 0x41, 0x38, 0x34, 0x1e, 0xa0,
	0x8c, 0x16, 0x89, 0x53, 0x39, 0xff, 0x73, 0x3e, 0x0d, 0xa2, 0x4b, 0x03, 0x9d, 0x41, 0xcf, 0xc9,
	0xa3, 0x48, 0x43, 0x87, 0x39, 0x7e, 0xbf, 0xef, 0x0e, 0xd1, 0xf1, 0x79, 0x54, 0xf4, 0x74, 0x52,
	0xd1, 0x9e, 0x86, 0x02, 0x7d, 0x6b, 0x83, 0x14, 0x3e, 0xfd, 0x82, 0x50, 0x88, 0xb9, 0xe7, 0x07,
	0x41, 0x1b, 0x14, 0xf8, 0x37, 0xed, 0x8e, 0x3d, 0xb4, 0x8d, 0x05, 0xd4, 0xf9, 0x38, 0xb1, 0x4d,
	0x1c, 0x73, 0xca, 0x21, 0x7b, 0x80, 0x00, 0x7d, 0x2b, 0xe1, 0x18, 0x8f, 0xfe, 0x82, 0x6c, 0x24,
	0x75, 0x05, 0xb6, 0xd7, 0xf1, 0xfb, 0x42, 0x25, 0x41, 0x95, 0x5b, 0xe9, 0x2a, 0x2d, 0x04, 0x4a,
	0xc5, 0xeb, 0x61, 0xea, 0x0c, 0xed, 0x90, 0x4f, 0x95, 0x7a, 0xd8, 0xbd, 0x49, 0x0b, 0x8b, 0x68,
	0xc1, 0x9c, 0xb0, 0xd0, 0x6c, 0x4c, 0xda, 0x30, 0xa4, 0xa6, 0xa6, 0x33, 0x6e, 0xe5, 0x98, 0xac,
	0x3a, 0x61, 0x7b, 0x60, 0xbb, 0xbd, 0x9e, 0xcb, 0x82, 0xb6, 0x3f, 0x60, 0x9e, 0xeb, 0x75, 0x8d,
	0x32, 0x2a, 0xdf, 0x8c, 0x95, 0x37, 0x5a, 0xa7, 0x12, 0xf3, 0xa5, 0x80, 0x80, 0xd6, 0x87, 0x4e,
	0x38, 0xc6, 0xa4, 0x67, 0x64, 0x5d, 0x57, 0xa7, 0xc5, 0x78, 0x09, 0x35, 0x3e, 0x49, 0xd3, 0xa8,
	0x87, 0x79, 0x35, 0xd6, 0x19, 0x47, 0xba, 0x4b, 0x9e, 0x4c, 0x6a, 0xd5, 0x63, 0xb1, 0x8c, 0xca,
	0x9f, 0xdf, 0xab, 0x3c, 0x11, 0x8c, 0x8d, 0x31, 0x13, 0x5a, 0x34, 0x18, 0xd9, 0x1c, 0x84, 0x6c,
	0xd4, 0xf1, 0xbd, 0xbb, 0x7e, 0x78, 0x17, 0xb6, 0x1d, 0xbb, 0xed, 0xb0, 0x60, 0xe8, 0xde, 0xb8,
	0x8e, 0x3d, 0x64, 0xc6, 0x77, 0xc7, 0xcd, 0x9c, 0x6a, 0xe0, 0x46, 0xad, 0x11, 0x43, 0xb9, 0x19,
	0x5d, 0x53, 0xc3, 0xd6, 0x26, 0xe9, 0x37, 0x05, 0xf2, 0x32, 0x61, 0x07, 0x3e, 0xed, 0x2e, 0x64,
	0xfa, 0xe4, 0xca, 0x56, 0xd0, 0xe4, 0x0f, 0xd2, 0x4d, 0x9e, 0xdc, 0xf5, 0xf7, 0x99, 0x37, 0xb9,
	0xc2, 0x67, 0x83, 0x3c, 0x10, 0xfd, 0x0d, 0x79, 0x91, 0xf0, 0xc0, 0x0d, 0xc3, 0x11, 0x4b, 0xb1,
	0xff, 0x10, 0xed, 0xbf, 0x4a, 0xb7, 0x7f, 0xc8, 0x85, 0x26, 0xcd, 0x6f, 0x0d, 0x72, 0x30, 0xf4,
	0x67, 0x64, 0xa9, 0xe3, 0x8f, 0xae, 0x7b, 0xac, 0x2d, 0x8b, 0x18, 0x45, 0x33, 0xeb, 0xb1, 0x99,
	0x3d, 0x9c, 0x8e, 0x4a, 0x59, 0xb9, 0xa3, 0x68, 0x5e, 0xd0, 0x7e, 0x5b, 0x20, 0x9f, 0x25, 0xbc,
	0x1f, 0x82, 0xcb, 0xe1, 0x0d, 0xa4, 0x86, 0x13, 0xc0, 0xa9, 0xf7, 0x86, 0xae, 0xdd, 0x13, 0xee,
	0xaf, 0xa2, 0xde, 0x9d, 0x74, 0xf7, 0xcf, 0xa4, 0x54, 0x23, 0x12, 0x92, 0x0b, 0x30, 0x07, 0xb9,
	0x28, 0xda, 0x23, 0x4f, 0x33, 0x52, 0x05, 0x8e, 0xac, 0xb1, 0x86, 0xb6, 0x3f, 0x9b, 0x22, 0x5b,
	0x9a, 0x0d, 0x30, 0xba, 0x79, 0x6f, 0xbe, 0x34, 0x1d, 0xfa, 0x87, 0x02, 0xf9, 0xfe, 0x74, 0x19,
	0xc3, 0x2d, 0x3f, 0x42, 0xcb, 0x3f, 0xfc, 0x88, 0xa4, 0x41, 0x0f, 0x9e, 0xe7, 0xa6, 0x0d, 0x78,
	0xf2, 0xbb, 0x02, 0xf9, 0xde, 0x34, 0x99, 0xc3, 0xfd, 0x58, 0xcf, 0x8a, 0x7e, 0x5a, 0x62, 0xa0,
	0x1b, 0x66, 0x5e, 0xfa, 0x80, 0x17, 0x7f, 0x2c, 0x90, 0xed, 0xa9, 0x32, 0x80, 0xbb, 0xf1, 0x09,
	0xba, 0xb1, 0xfb, 0x31, 0x49, 0x80, 0x8e, 0xbc, 0xc8, 0x4f, 0x03, 0x70, 0xe5, 0x82, 0xac, 0xff,
	0xca, 0x0b, 0xda, 0xb7, 0x2c, 0x80, 0xed, 0xe2, 0x0e, 0x7c, 0xb0, 0x7b, 0x3d, 0xe6, 0x75, 0x99,
	0x61, 0x8c, 0xff, 0xaa, 0xbe, 0x3a, 0xb1, 0x2e, 0x24, 0xac, 0xa1, 0x50, 0xfc, 0x57, 0x05, 0xf2,
	0x13, 0x7c, 0xfa, 0x13, 0x52, 0x0e, 0xd8, 0x80, 0xc1, 0xfe, 0x77, 0xda, 0xfc, 0x88, 0x6c, 0xa0,
	0xb6, 0x47, 0xb1, 0x36, 0x4b, 0xce, 0x8a, 0x13, 0xb2, 0x18, 0xc4, 0x24, 0x3f, 0x5f, 0x91, 0x2c,
	0x94, 0xcd, 0xc0, 0x78, 0x3c, 0x7e, 0xbe, 0x94, 0x30, 0x54, 0xc2, 0x80, 0x9f, 0xaf, 0x40, 0xa3,
	0xe9, 0x1a, 0x99, 0x6d, 0x72, 0x93, 0x9b, 0x20, 0x35, 0x07, 0xb3, 0x48, 0xd1, 0x1f, 0x13, 0xd2,
	0x82, 0xbe, 0xc8, 0xf5, 0xbd, 0x77, 0xec, 0xce, 0x78, 0x8a, 0x1a, 0xf5, 0x86, 0x28, 0x9a, 0x03,
	0x09, 0x0d, 0x49, 0x1f, 0x93, 0x79, 0x07, 0x8a, 0xad, 0x37, 0x3c, 0xec, 0x18, 0x9f, 0x72, 0x8d,
	0x56, 0x44, 0xd3, 0x17, 0x64, 0xe9, 0x94, 0x2b, 0x70, 0xfc, 0x5e, 0x33, 0x08, 0xfc, 0xc0, 0x78,
	0x02, 0x80, 0x05, 0x2b, 0xc9, 0xac, 0x2f, 0x90, 0x07, 0x8e, 0xef, 0x0d, 0x41, 0xc4, 0x24, 0x64,
	0x5e, 0x35, 0x43, 0x66, 0x9b, 0x2c, 0xb6, 0x58, 0x70, 0xeb, 0x3a, 0xec, 0xd0, 0xbb, 0xf1, 0x29,
	0x25, 0xb3, 0x9e, 0xdd, 0x67, 0xd8, 0xaa, 0x2d, 0x58, 0x38, 0xa6, 0x5b, 0x64, 0xb1, 0xc3, 0x42,
	0x27, 0x70, 0x07, 0x43, 0xf0, 0x06, 0xfb, 0xb1, 0x05, 0x4b, 0x67, 0x71, 0xef, 0x60, 0x09, 0xb7,
	0x2e, 0x34, 0x0b, 0xd8, 0x77, 0x2d, 0x58, 0x11, 0x6d, 0x9a, 0xa4, 0x24, 0x5a, 0x1b, 0x6a, 0x90,
	0x07, 0xad, 0x91, 0xe3, 0xc0, 0xa2, 0x50, 0xfd, 0xbc, 0xa5, 0x48, 0xd3, 0x20, 0x25, 0x51, 0xa5,
	0xe8, 0x32, 0x29, 0x5e, 0x56, 0x70, 0xba, 0x6c, 0xc1, 0xc8, 0xdc, 0x25, 0x65, 0xbd, 0x8a, 0x8d,
	0xcf, 0x23, 0x5d, 0x45, 0x97, 0x38, 0x5d, 0x35, 0x9f, 0x40, 0x2c, 0x12, 0x3d, 0x50, 0x99, 0x14,
	0x0e, 0x24, 0xbe, 0x70, 0x60, 0x56, 0xc9, 0x5a, 0x5a, 0xab, 0xc3, 0x51, 0x97, 0x0a, 0x75, 0xc9,
	0x29, 0x4b, 0xea, 0x2c, 0x58, 0xe6, 0x0e, 0x59, 0x4e, 0xf6, 0x75, 0x93, 0xe8, 0x2b, 0x85, 0xbe,
	0x82, 0xe5, 0xce, 0xe2, 0xf6, 0x03, 0xb7, 0xa6, 0x30, 0x35, 0x4e, 0xd5, 0x15, 0xa6, 0x6e, 0xd6,
	0xc9, 0x7a, 0x7a, 0x27, 0x33, 0xa9, 0xb9, 0xa6, 0xa4, 0xa4, 0x8e, 0x19, 0xa5, 0xe3, 0x4f, 0x05,
	0x62, 0xdc, 0xd7, 0xac, 0xd0, 0x97, 0x4a, 0x4d, 0x46, 0x77, 0xca, 0x0d, 0xbc, 0x54, 0x06, 0x32,
	0x71, 0x35, 0x8e, 0xab, 0xcb, 0x86, 0x3a, 0x03, 0x57, 0x37, 0x7f, 0x4a, 0x56, 0xc6, 0xbb, 0x3e,
	0xee, 0xf6, 0x7b, 0xb5, 0xa4, 0xf7, 0x3c, 0x53, 0xa0, 0x08, 0x0c, 0x3a, 0x3e, 0xa4, 0xa9, 0x58,
	0x59, 0x44, 0x9b, 0x7f, 0x2d, 0x90, 0x67, 0xb9, 0x45, 0x36, 0x2d, 0x03, 0x6a, 0x15, 0x95, 0x01,
	0x35, 0xa4, 0xeb, 0x15, 0x19, 0x27, 0x18, 0xc9, 0x0c, 0x99, 0x55, 0x19, 0x82, 0xf8, 0x2a, 0xb6,
	0xee, 0x1c, 0x8f, 0x74, 0xbd, 0x8a, 0xed, 0x38, 0xc7, 0x57, 0xc5, 0xe6, 0x3f, 0x90, 0x9b, 0xcf,
	0xa9, 0x16, 0xb6, 0xcb, 0x40, 0xb5, 0xcc, 0x7f, 0x16, 0xc9, 0xf3, 0x29, 0x7e, 0x03, 0x74, 0x3b,
	0xf2, 0x31, 0x2b, 0x60, 0xdc, 0xfb, 0xed, 0xc8, 0xfb, 0x4c, 0x64, 0x0d, 0x91, 0x72, 0x5d, 0x99,
	0xc8, 0x3a, 0x22, 0xe5, 0x8a, 0xb3, 0xad, 0x57, 0xd1, 0x7a, 0x35, 0xef, 0x1a, 0x83, 0x51, 0xda,
	0x8e, 0xa2, 0x94, 0x6d, 0x3d, 0x3b, 0x7e, 0x3e, 0xd9, 0xb8, 0xf7, 0xff, 0xcd, 0x53, 0xa3, 0xde,
	0x73, 0xbd, 0x0e, 0xeb, 0xa8, 0x83, 0x13, 0xd1, 0xda, 0x9c, 0x3a, 0x46, 0x11, 0x2d, 0x0c, 0xce,
	0x24, 0x0c, 0xce, 0x2a, 0x83, 0x7f, 0x2f, 0x90, 0xcd, 0x8c, 0x8e, 0x81, 0xbe, 0x19, 0xb3, 0x99,
	0xb5, 0xb8, 0xd8, 0x9b, 0x37, 0x63, 0xde, 0x4c, 0x23, 0x95, 0xed, 0xe7, 0xef, 0x0b, 0x64, 0x2b,
	0xef, 0xbf, 0x4e, 0x57, 0xc8, 0xcc, 0x65, 0x45, 0xa5, 0x3e, 0x1f, 0x0a, 0x8e, 0x2a, 0x7f, 0x7c,
	0x88, 0x9c, 0xaa, 0x4a, 0x7f, 0x3e, 0x14, 0x1c, 0x75, 0x00, 0xf8, 0x50, 0x94, 0x95, 0xb9, 0x44,
	0x59, 0x29, 0xa9, 0xb2, 0xf2, 0xb7, 0x22, 0x31, 0xf3, 0x1b, 0x0c, 0xb8, 0xc7, 0x46, 0xae, 0x64,
	0x2d, 0x1e, 0x9d, 0x7c, 0x15, 0x3b, 0x99, 0x83, 0xad, 0x22, 0xb6, 0x9a, 0x9f, 0xe5, 0xb8, 0xb0,
	0x57, 0xf1, 0xc2, 0x72, 0xb0, 0x55, 0x51, 0xe8, 0xe6, 0xa6, 0x2c, 0x74, 0xa5, 0xfc, 0x42, 0xf7,
	0x4b, 0xb2, 0x3e, 0xd1, 0xff, 0xe0, 0xdf, 0x30, 0xab, 0xee, 0xf3, 0x9f, 0xeb, 0x81, 0x1d, 0x7e,
	0x90, 0xbb, 0x83, 0x63, 0xba, 0x4e, 0x4a, 0xef, 0x6b, 0xbd, 0xc1, 0x07, 0x5b, 0xee, 0x90, 0xa4,
	0xcc, 0x3f, 0x43, 0x7d, 0x4f, 0x37, 0x01, 0xe1, 0x7f, 0xa9, 0x8c, 0x4c, 0xb3, 0x9c, 0xdc, 0xfa,
	0xfe, 0x71, 0x8e, 0x7d, 0x53, 0x4c, 0xae, 0x3d, 0xee, 0xe5, 0x78, 0x23, 0xd2, 0xea, 0x43, 0xeb,
	0x55, 0x3b, 0xf3, 0xf7, 0xed, 0xbe, 0x7c, 0xf0, 0x29, 0x5b, 0x49, 0x66, 0x84, 0xaa, 0x2b, 0x54,
	0x51, 0x43, 0x29, 0x26, 0x3f, 0xf1, 0x91, 0x1a, 0xe1, 0x56, 0x44, 0x63, 0x35, 0x50, 0x73, 0xb3,
	0xb2, 0x1a, 0xa8, 0xb9, 0x1f, 0x91, 0xe2, 0x59, 0x45, 0x6e, 0xf5, 0x56, 0x46, 0xb7, 0x8a, 0xa1,
	0xb4, 0x00, 0x8b, 0x12, 0xaa, 0xb4, 0x4d, 0x23, 0x51, 0x35, 0xff, 0x57, 0x4c, 0xee, 0x4d, 0x1c,
	0x02, 0xd8, 0x9b, 0xb7, 0x69, 0x41, 0xc8, 0x8a, 0xff, 0x58, 0x78, 0xde, 0xa6, 0x85, 0x27, 0x5f,
	0x3e, 0x0a, 0xc0, 0x9b, 0xb1, 0xc0, 0x65, 0x16, 0xa7, 0x9a, 0x26, 0x95, 0x08, 0x69, 0x76, 0x49,
	0x53, 0x52, 0x55, 0x2d, 0xd8, 0x66, 0x5e, 0xe8, 0x9a, 0x0d, 0x0c, 0x77, 0x55, 0x0b, 0xf7, 0x74,
	0x32, 0x55, 0xf3, 0xdf, 0x85, 0x64, 0x55, 0xba, 0xe7, 0x3a, 0x09, 0x0d, 0xe6, 0x97, 0x41, 0xf7,
	0x24, 0xee, 0x5f, 0x15, 0x29, 0x9b, 0x86, 0xe2, 0x58, 0xdb, 0x38, 0x13, 0x35, 0x05, 0x70, 0x00,
	0xe0, 0x5f, 0x5e, 0x93, 0xd9, 0x84, 0x63, 0xc9, 0xab, 0xcb, 0x4a, 0x89, 0x63, 0xfa, 0x39, 0x21,
	0xb1, 0xcd, 0xec, 0x9c, 0x89, 0x71, 0x96, 0x26, 0x63, 0xfe, 0xa3, 0x48, 0x5e, 0x4c, 0x73, 0x75,
	0xca, 0x58, 0xcc, 0x76, 0xb4, 0x98, 0x29, 0xba, 0x0b, 0xb9, 0xcc, 0xbc, 0x4e, 0x60, 0x47, 0x0b,
	0x40, 0x16, 0x56, 0x84, 0x66, 0x47, 0x0b, 0x4d, 0x1e, 0xba, 0x4e, 0xeb, 0x29, 0x41, 0x33, 0xf3,
	0x82, 0x06, 0x3b, 0xaf, 0x87, 0xed, 0x0b, 0xb2, 0x96, 0x76, 0xf1, 0xe3, 0x05, 0xf6, 0x6b, 0x55,
	0x6e, 0xbf, 0x86, 0xd2, 0x32, 0xc7, 0x9b, 0xef, 0x10, 0x82, 0x33, 0x03, 0x46, 0x96, 0x35, 0x23,
	0xc0, 0xb6, 0xc4, 0xa4, 0xf9, 0x8c, 0x2c, 0x6a, 0xd7, 0x3e, 0xbe, 0xcf, 0xf0, 0xe1, 0x77, 0x92,
	0x19, 0xb8, 0x56, 0xe1, 0xd8, 0x7c, 0x43, 0xca, 0xfa, 0xe5, 0x2e, 0x56, 0x5c, 0xc8, 0x52, 0xfc,
	0xdf, 0x22, 0x59, 0x8d, 0x1f, 0xcd, 0x5a, 0x0c, 0xae, 0xd1, 0x43, 0x7e, 0x79, 0x03, 0x27, 0x4f,
	0x94, 0x93, 0x27, 0x9c, 0xda, 0x57, 0xff, 0x84, 0x7d, 0x99, 0x99, 0x33, 0x63, 0x99, 0x99, 0x68,
	0x57, 0x2f, 0x5f, 0xab, 0x76, 0xf5, 0xf2, 0x35, 0x5c, 0x2b, 0xe7, 0xf6, 0x8e, 0xfc, 0xee, 0xa9,
	0xfc, 0x65, 0x0b, 0x42, 0x71, 0xf7, 0x65, 0xe3, 0x25, 0x08, 0xc5, 0xfd, 0x4a, 0x36, 0x60, 0x82,
	0x80, 0x7a, 0xb7, 0x2a, 0xe2, 0x68, 0xc3, 0xb5, 0xaa, 0xe9, 0x89, 0x07, 0xea, 0x13, 0x7c, 0xbf,
	0x2d, 0x5b, 0x69, 0x53, 0x70, 0x64, 0xd7, 0x26, 0xd9, 0xfb, 0x15, 0x7c, 0x9f, 0x2d, 0x5b, 0xa9,
	0x73, 0xe9, 0x32, 0x07, 0x15, 0x7c, 0x71, 0x4d, 0x95, 0x39, 0xa8, 0xf0, 0xc8, 0xbc, 0xc3, 0x57,
	0xd3, 0x39, 0xab, 0xf0, 0x8e, 0xaf, 0xfc, 0x5d, 0x05, 0x9f, 0x3c, 0xe7, 0x2c, 0x18, 0x99, 0xff,
	0x29, 0x92, 0x15, 0xed, 0x49, 0x72, 0x74, 0x3d, 0x45, 0x68, 0xaf, 0xa2, 0xd0, 0x5e, 0x61, 0x68,
	0xaf, 0xa2, 0xd0, 0x5e, 0x61, 0x68, 0xaf, 0xa2, 0xd0, 0x5e, 0x7d, 0x9b, 0x43, 0xfb, 0x6b, 0xf2,
	0x70, 0xe2, 0x6d, 0x9a, 0x8b, 0x9c, 0xab, 0xd0, 0x9e, 0x73, 0xaa, 0xa9, 0x42, 0xdb, 0xe4, 0xd4,
	0x85, 0xea, 0x65, 0x2f, 0x30, 0x18, 0xac, 0x37, 0x54, 0x3f, 0x63, 0x41, 0x70, 0xee, 0x91, 0x7d,
	0xcd, 0x7a, 0x32, 0xc2, 0x82, 0xe0, 0x92, 0x47, 0xaa, 0xdd, 0x3c, 0x32, 0x43, 0xb2, 0x71, 0xef,
	0x2b, 0x33, 0xf7, 0xf2, 0x3c, 0xba, 0xe9, 0x9d, 0xe3, 0xfe, 0x35, 0xa3, 0x22, 0xde, 0x44, 0xfa,
	0x22, 0xda, 0xdf, 0x8b, 0x0a, 0xef, 0x58, 0xd0, 0x72, 0x45, 0x75, 0x2c, 0x82, 0xe2, 0xb8, 0xa3,
	0x8a, 0xda, 0xe7, 0xa3, 0x8a, 0xf9, 0xaf, 0x82, 0x7e, 0x4c, 0xe3, 0x9b, 0x2a, 0xc8, 0x5b, 0x67,
	0x6e, 0xaf, 0xc3, 0xa4, 0x4d, 0x49, 0xf1, 0xf7, 0x0f, 0x31, 0x3a, 0x0c, 0x4f, 0x58, 0x17, 0x1d,
	0x98, 0xb7, 0x74, 0x16, 0x97, 0x6c, 0x09, 0x49, 0xe1, 0x8d, 0xa4, 0xb8, 0x64, 0x4b, 0x93, 0x9c,
	0x15, 0x92, 0xad, 0xa4, 0xe4, 0xb1, 0x90, 0x14, 0xfe, 0x49, 0x8a, 0x4b, 0x1e, 0x6b, 0x92, 0x25,
	0x21, 0xa9, 0xb1, 0x4c, 0x53, 0x7f, 0x49, 0xe2, 0xc1, 0xbe, 0xb5, 0x7b, 0x23, 0xf5, 0xaf, 0x10,
	0xc4, 0x75, 0x09, 0xcb, 0xd4, 0xeb, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0x4d, 0x12, 0x3c, 0xa3,
	0xb6, 0x1b, 0x00, 0x00,
}
