syntax = "proto3";

package comm;

// P, OrderOfSubgroup, G could be actually fixed, or least not changed each time
message PedersenFirst {
	bytes H = 1;
	bytes P = 2;
	bytes OrderOfSubgroup = 3;
	bytes G = 4;
}

service Pedersen {
  rpc GetH(EmptyMsg) returns (PedersenFirst) {}
  rpc Commit(BigInt) returns (EmptyMsg) {}
  rpc Decommit(PedersenDecommitment) returns (Status) {}
}

service PedersenEC {
  rpc GetH(EmptyMsg) returns (ECGroupElement) {}
  rpc Commit(ECGroupElement) returns (EmptyMsg) {}
  rpc Decommit(PedersenDecommitment) returns (Status) {}
}

service PedersenECStream {
  rpc GetH(EmptyMsg) returns (ECGroupElement) {}
  rpc Commit(ECGroupElement) returns (EmptyMsg) {}
  rpc Decommit(PedersenDecommitment) returns (Status) {}
}

message EmptyMsg {}

message PedersenDecommitment {
	bytes X = 1;
 	bytes R = 2;
}

message BigInt {
	bytes X1 = 1;
}

message ECGroupElement {
	bytes X = 1;
 	bytes Y = 2;
}

message Status {
	bool Success = 1;
}

message SchnorrProofRandomData {
	bytes X = 1;
	bytes P = 2;
	bytes OrderOfSubgroup = 3;
	bytes G = 4;
	bytes T = 5;
}

service SchnorrProtocol {
  // OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a and 
  // dlog parameters, output is challenge commitment
  rpc OpeningMsg(PedersenFirst) returns (BigInt) {}
  // PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
  // TODO: SchnorrProofRandomData contains DLog parameters, however these are used only
  // in SigmaProtocol while in ZKP/ZKPOK Pedersen's DLog is used (from PedersenFirst)
  rpc ProofRandomData(SchnorrProofRandomData) returns (PedersenDecommitment) {}
  rpc ProofData(SchnorrProofData) returns (Status) {}
}

message SchnorrECProofRandomData {
	ECGroupElement X = 1;
	ECGroupElement T = 2;
}

service SchnorrECProtocol {
  // OpeningMsg is called in ZKP and ZKPOK, input is Pedersen's h = g^a, output is challenge commitment
  rpc OpeningMsg(ECGroupElement) returns (ECGroupElement) {} 
  // PedersenDecommitment is used even it is not ZKP or ZKPOK (trapdoor is empty for SigmaProtocol)
  rpc ProofRandomData(SchnorrECProofRandomData) returns (PedersenDecommitment) {}
  rpc ProofData(SchnorrProofData) returns (Status) {}
}

message SchnorrProofData {
	bytes Z = 1;
 	bytes Trapdoor = 2; // needed only in zero-knowledge proof of knowledge
}

message CSPaillierSecretKey {
	bytes N = 1;
	bytes G = 2;
	bytes X1 = 3;
	bytes X2 = 4;
	bytes X3 = 5;
	bytes DLogP = 6;
	bytes DLogG = 7;
	bytes DLogQ = 8;
	bytes VerifiableEncGroupN = 9;
	bytes VerifiableEncGroupG1 = 10;
	bytes VerifiableEncGroupH1 = 11;
	int32 K = 12;
	int32 K1 = 13;
}

message CSPaillierPubKey {
	bytes N = 1;
	bytes G = 2;
	bytes Y1 = 3;
	bytes Y2 = 4;
	bytes Y3 = 5;
	bytes DLogP = 6;
	bytes DLogG = 7;
	bytes DLogQ = 8;
	bytes VerifiableEncGroupN = 9;
	bytes VerifiableEncGroupG1 = 10;
	bytes VerifiableEncGroupH1 = 11;
	int32 K = 12;
	int32 K1 = 13;
}

message CSPaillierOpening {
	bytes U = 1;
	bytes E = 2;
	bytes V = 3;
	bytes Delta = 4;
	bytes Label = 5;
	bytes L = 6;
}

message CSPaillierProofRandomData {
	bytes U1 = 1;
	bytes E1 = 2;
	bytes V1 = 3;
	bytes Delta1 = 4;
	bytes L1 = 5;
}

message CSPaillierProofData {
	bytes RTilde = 1;
	bool RTildeIsNeg = 2;
	bytes STilde = 3;
	bool STildeIsNeg = 4;
	bytes MTilde = 5;
	bool MTildeIsNeg = 6;
}

service CSPaillierProtocol {
  rpc OpeningMsg(CSPaillierOpening) returns (EmptyMsg) {}
  rpc ProofRandomData(CSPaillierProofRandomData) returns (BigInt) {}
  rpc ProofData(CSPaillierProofData) returns (Status) {}
}









