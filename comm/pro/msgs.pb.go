// Code generated by protoc-gen-go.
// source: msgs.proto
// DO NOT EDIT!

/*
Package comm is a generated protocol buffer package.

It is generated from these files:
	msgs.proto

It has these top-level messages:
	Message
	EmptyMsg
	Status
	BigInt
	PedersenFirst
	PedersenDecommitment
	ECGroupElement
	SchnorrProofRandomData
	SchnorrECProofRandomData
	SchnorrProofData
	CSPaillierSecretKey
	CSPaillierPubKey
	CSPaillierOpening
	CSPaillierProofRandomData
	CSPaillierProofData
*/
package comm

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Valid schema types
type SchemaType int32

const (
	SchemaType_PEDERSEN    SchemaType = 0
	SchemaType_PEDERSEN_EC SchemaType = 1
	SchemaType_SCHNORR     SchemaType = 2
	SchemaType_SCHNORR_EC  SchemaType = 3
	SchemaType_CSPAILLIER  SchemaType = 4
)

var SchemaType_name = map[int32]string{
	0: "PEDERSEN",
	1: "PEDERSEN_EC",
	2: "SCHNORR",
	3: "SCHNORR_EC",
	4: "CSPAILLIER",
}
var SchemaType_value = map[string]int32{
	"PEDERSEN":    0,
	"PEDERSEN_EC": 1,
	"SCHNORR":     2,
	"SCHNORR_EC":  3,
	"CSPAILLIER":  4,
}

func (x SchemaType) String() string {
	return proto.EnumName(SchemaType_name, int32(x))
}
func (SchemaType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Valid schema variants
type SchemaVariant int32

const (
	SchemaVariant_SIGMA SchemaVariant = 0
	SchemaVariant_ZKP   SchemaVariant = 1
	SchemaVariant_ZKPOK SchemaVariant = 2
)

var SchemaVariant_name = map[int32]string{
	0: "SIGMA",
	1: "ZKP",
	2: "ZKPOK",
}
var SchemaVariant_value = map[string]int32{
	"SIGMA": 0,
	"ZKP":   1,
	"ZKPOK": 2,
}

func (x SchemaVariant) String() string {
	return proto.EnumName(SchemaVariant_name, int32(x))
}
func (SchemaVariant) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// A generic message
type Message struct {
	Schema        SchemaType    `protobuf:"varint,1,opt,name=schema,enum=comm.SchemaType" json:"schema,omitempty"`
	SchemaVariant SchemaVariant `protobuf:"varint,2,opt,name=schema_variant,json=schemaVariant,enum=comm.SchemaVariant" json:"schema_variant,omitempty"`
	// Types that are valid to be assigned to Content:
	//	*Message_Empty
	//	*Message_Bigint
	//	*Message_EcGroupElement
	//	*Message_Status
	//	*Message_PedersenFirst
	//	*Message_PedersenDecommitment
	//	*Message_SchnorrProofData
	//	*Message_SchnorrProofRandomData
	//	*Message_SchnorrEcProofRandomData
	//	*Message_CsPaillierOpening
	//	*Message_CsPaillierProofData
	//	*Message_CsPaillierProofRandomData
	Content  isMessage_Content `protobuf_oneof:"content"`
	ClientId int32             `protobuf:"varint,15,opt,name=clientId" json:"clientId,omitempty"`
}

func (m *Message) Reset()                    { *m = Message{} }
func (m *Message) String() string            { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()               {}
func (*Message) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type isMessage_Content interface {
	isMessage_Content()
}

type Message_Empty struct {
	Empty *EmptyMsg `protobuf:"bytes,3,opt,name=empty,oneof"`
}
type Message_Bigint struct {
	Bigint *BigInt `protobuf:"bytes,4,opt,name=bigint,oneof"`
}
type Message_EcGroupElement struct {
	EcGroupElement *ECGroupElement `protobuf:"bytes,5,opt,name=ec_group_element,json=ecGroupElement,oneof"`
}
type Message_Status struct {
	Status *Status `protobuf:"bytes,6,opt,name=status,oneof"`
}
type Message_PedersenFirst struct {
	PedersenFirst *PedersenFirst `protobuf:"bytes,7,opt,name=pedersen_first,json=pedersenFirst,oneof"`
}
type Message_PedersenDecommitment struct {
	PedersenDecommitment *PedersenDecommitment `protobuf:"bytes,8,opt,name=pedersen_decommitment,json=pedersenDecommitment,oneof"`
}
type Message_SchnorrProofData struct {
	SchnorrProofData *SchnorrProofData `protobuf:"bytes,9,opt,name=schnorr_proof_data,json=schnorrProofData,oneof"`
}
type Message_SchnorrProofRandomData struct {
	SchnorrProofRandomData *SchnorrProofRandomData `protobuf:"bytes,10,opt,name=schnorr_proof_random_data,json=schnorrProofRandomData,oneof"`
}
type Message_SchnorrEcProofRandomData struct {
	SchnorrEcProofRandomData *SchnorrECProofRandomData `protobuf:"bytes,11,opt,name=schnorr_ec_proof_random_data,json=schnorrEcProofRandomData,oneof"`
}
type Message_CsPaillierOpening struct {
	CsPaillierOpening *CSPaillierOpening `protobuf:"bytes,12,opt,name=cs_paillier_opening,json=csPaillierOpening,oneof"`
}
type Message_CsPaillierProofData struct {
	CsPaillierProofData *CSPaillierProofData `protobuf:"bytes,13,opt,name=cs_paillier_proof_data,json=csPaillierProofData,oneof"`
}
type Message_CsPaillierProofRandomData struct {
	CsPaillierProofRandomData *CSPaillierProofRandomData `protobuf:"bytes,14,opt,name=cs_paillier_proof_random_data,json=csPaillierProofRandomData,oneof"`
}

func (*Message_Empty) isMessage_Content()                     {}
func (*Message_Bigint) isMessage_Content()                    {}
func (*Message_EcGroupElement) isMessage_Content()            {}
func (*Message_Status) isMessage_Content()                    {}
func (*Message_PedersenFirst) isMessage_Content()             {}
func (*Message_PedersenDecommitment) isMessage_Content()      {}
func (*Message_SchnorrProofData) isMessage_Content()          {}
func (*Message_SchnorrProofRandomData) isMessage_Content()    {}
func (*Message_SchnorrEcProofRandomData) isMessage_Content()  {}
func (*Message_CsPaillierOpening) isMessage_Content()         {}
func (*Message_CsPaillierProofData) isMessage_Content()       {}
func (*Message_CsPaillierProofRandomData) isMessage_Content() {}

func (m *Message) GetContent() isMessage_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *Message) GetSchema() SchemaType {
	if m != nil {
		return m.Schema
	}
	return SchemaType_PEDERSEN
}

func (m *Message) GetSchemaVariant() SchemaVariant {
	if m != nil {
		return m.SchemaVariant
	}
	return SchemaVariant_SIGMA
}

func (m *Message) GetEmpty() *EmptyMsg {
	if x, ok := m.GetContent().(*Message_Empty); ok {
		return x.Empty
	}
	return nil
}

func (m *Message) GetBigint() *BigInt {
	if x, ok := m.GetContent().(*Message_Bigint); ok {
		return x.Bigint
	}
	return nil
}

func (m *Message) GetEcGroupElement() *ECGroupElement {
	if x, ok := m.GetContent().(*Message_EcGroupElement); ok {
		return x.EcGroupElement
	}
	return nil
}

func (m *Message) GetStatus() *Status {
	if x, ok := m.GetContent().(*Message_Status); ok {
		return x.Status
	}
	return nil
}

func (m *Message) GetPedersenFirst() *PedersenFirst {
	if x, ok := m.GetContent().(*Message_PedersenFirst); ok {
		return x.PedersenFirst
	}
	return nil
}

func (m *Message) GetPedersenDecommitment() *PedersenDecommitment {
	if x, ok := m.GetContent().(*Message_PedersenDecommitment); ok {
		return x.PedersenDecommitment
	}
	return nil
}

func (m *Message) GetSchnorrProofData() *SchnorrProofData {
	if x, ok := m.GetContent().(*Message_SchnorrProofData); ok {
		return x.SchnorrProofData
	}
	return nil
}

func (m *Message) GetSchnorrProofRandomData() *SchnorrProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrProofRandomData); ok {
		return x.SchnorrProofRandomData
	}
	return nil
}

func (m *Message) GetSchnorrEcProofRandomData() *SchnorrECProofRandomData {
	if x, ok := m.GetContent().(*Message_SchnorrEcProofRandomData); ok {
		return x.SchnorrEcProofRandomData
	}
	return nil
}

func (m *Message) GetCsPaillierOpening() *CSPaillierOpening {
	if x, ok := m.GetContent().(*Message_CsPaillierOpening); ok {
		return x.CsPaillierOpening
	}
	return nil
}

func (m *Message) GetCsPaillierProofData() *CSPaillierProofData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofData); ok {
		return x.CsPaillierProofData
	}
	return nil
}

func (m *Message) GetCsPaillierProofRandomData() *CSPaillierProofRandomData {
	if x, ok := m.GetContent().(*Message_CsPaillierProofRandomData); ok {
		return x.CsPaillierProofRandomData
	}
	return nil
}

func (m *Message) GetClientId() int32 {
	if m != nil {
		return m.ClientId
	}
	return 0
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Message) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Message_OneofMarshaler, _Message_OneofUnmarshaler, _Message_OneofSizer, []interface{}{
		(*Message_Empty)(nil),
		(*Message_Bigint)(nil),
		(*Message_EcGroupElement)(nil),
		(*Message_Status)(nil),
		(*Message_PedersenFirst)(nil),
		(*Message_PedersenDecommitment)(nil),
		(*Message_SchnorrProofData)(nil),
		(*Message_SchnorrProofRandomData)(nil),
		(*Message_SchnorrEcProofRandomData)(nil),
		(*Message_CsPaillierOpening)(nil),
		(*Message_CsPaillierProofData)(nil),
		(*Message_CsPaillierProofRandomData)(nil),
	}
}

func _Message_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Empty); err != nil {
			return err
		}
	case *Message_Bigint:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Bigint); err != nil {
			return err
		}
	case *Message_EcGroupElement:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.EcGroupElement); err != nil {
			return err
		}
	case *Message_Status:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Status); err != nil {
			return err
		}
	case *Message_PedersenFirst:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenFirst); err != nil {
			return err
		}
	case *Message_PedersenDecommitment:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.PedersenDecommitment); err != nil {
			return err
		}
	case *Message_SchnorrProofData:
		b.EncodeVarint(9<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofData); err != nil {
			return err
		}
	case *Message_SchnorrProofRandomData:
		b.EncodeVarint(10<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrProofRandomData); err != nil {
			return err
		}
	case *Message_SchnorrEcProofRandomData:
		b.EncodeVarint(11<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.SchnorrEcProofRandomData); err != nil {
			return err
		}
	case *Message_CsPaillierOpening:
		b.EncodeVarint(12<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierOpening); err != nil {
			return err
		}
	case *Message_CsPaillierProofData:
		b.EncodeVarint(13<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofData); err != nil {
			return err
		}
	case *Message_CsPaillierProofRandomData:
		b.EncodeVarint(14<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.CsPaillierProofRandomData); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Message.Content has unexpected type %T", x)
	}
	return nil
}

func _Message_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Message)
	switch tag {
	case 3: // content.empty
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(EmptyMsg)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Empty{msg}
		return true, err
	case 4: // content.bigint
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(BigInt)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Bigint{msg}
		return true, err
	case 5: // content.ec_group_element
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(ECGroupElement)
		err := b.DecodeMessage(msg)
		m.Content = &Message_EcGroupElement{msg}
		return true, err
	case 6: // content.status
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Status)
		err := b.DecodeMessage(msg)
		m.Content = &Message_Status{msg}
		return true, err
	case 7: // content.pedersen_first
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenFirst)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenFirst{msg}
		return true, err
	case 8: // content.pedersen_decommitment
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(PedersenDecommitment)
		err := b.DecodeMessage(msg)
		m.Content = &Message_PedersenDecommitment{msg}
		return true, err
	case 9: // content.schnorr_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofData{msg}
		return true, err
	case 10: // content.schnorr_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrProofRandomData{msg}
		return true, err
	case 11: // content.schnorr_ec_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(SchnorrECProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_SchnorrEcProofRandomData{msg}
		return true, err
	case 12: // content.cs_paillier_opening
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierOpening)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierOpening{msg}
		return true, err
	case 13: // content.cs_paillier_proof_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofData{msg}
		return true, err
	case 14: // content.cs_paillier_proof_random_data
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(CSPaillierProofRandomData)
		err := b.DecodeMessage(msg)
		m.Content = &Message_CsPaillierProofRandomData{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Message_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Message)
	// content
	switch x := m.Content.(type) {
	case *Message_Empty:
		s := proto.Size(x.Empty)
		n += proto.SizeVarint(3<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Bigint:
		s := proto.Size(x.Bigint)
		n += proto.SizeVarint(4<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_EcGroupElement:
		s := proto.Size(x.EcGroupElement)
		n += proto.SizeVarint(5<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_Status:
		s := proto.Size(x.Status)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenFirst:
		s := proto.Size(x.PedersenFirst)
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_PedersenDecommitment:
		s := proto.Size(x.PedersenDecommitment)
		n += proto.SizeVarint(8<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofData:
		s := proto.Size(x.SchnorrProofData)
		n += proto.SizeVarint(9<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrProofRandomData:
		s := proto.Size(x.SchnorrProofRandomData)
		n += proto.SizeVarint(10<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_SchnorrEcProofRandomData:
		s := proto.Size(x.SchnorrEcProofRandomData)
		n += proto.SizeVarint(11<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierOpening:
		s := proto.Size(x.CsPaillierOpening)
		n += proto.SizeVarint(12<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofData:
		s := proto.Size(x.CsPaillierProofData)
		n += proto.SizeVarint(13<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *Message_CsPaillierProofRandomData:
		s := proto.Size(x.CsPaillierProofRandomData)
		n += proto.SizeVarint(14<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type EmptyMsg struct {
}

func (m *EmptyMsg) Reset()                    { *m = EmptyMsg{} }
func (m *EmptyMsg) String() string            { return proto.CompactTextString(m) }
func (*EmptyMsg) ProtoMessage()               {}
func (*EmptyMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Status struct {
	Success bool `protobuf:"varint,1,opt,name=Success" json:"Success,omitempty"`
}

func (m *Status) Reset()                    { *m = Status{} }
func (m *Status) String() string            { return proto.CompactTextString(m) }
func (*Status) ProtoMessage()               {}
func (*Status) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Status) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type BigInt struct {
	X1 []byte `protobuf:"bytes,1,opt,name=X1,proto3" json:"X1,omitempty"`
}

func (m *BigInt) Reset()                    { *m = BigInt{} }
func (m *BigInt) String() string            { return proto.CompactTextString(m) }
func (*BigInt) ProtoMessage()               {}
func (*BigInt) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *BigInt) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

type PedersenFirst struct {
	H []byte `protobuf:"bytes,1,opt,name=H,proto3" json:"H,omitempty"`
}

func (m *PedersenFirst) Reset()                    { *m = PedersenFirst{} }
func (m *PedersenFirst) String() string            { return proto.CompactTextString(m) }
func (*PedersenFirst) ProtoMessage()               {}
func (*PedersenFirst) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *PedersenFirst) GetH() []byte {
	if m != nil {
		return m.H
	}
	return nil
}

type PedersenDecommitment struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	R []byte `protobuf:"bytes,2,opt,name=R,proto3" json:"R,omitempty"`
}

func (m *PedersenDecommitment) Reset()                    { *m = PedersenDecommitment{} }
func (m *PedersenDecommitment) String() string            { return proto.CompactTextString(m) }
func (*PedersenDecommitment) ProtoMessage()               {}
func (*PedersenDecommitment) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *PedersenDecommitment) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *PedersenDecommitment) GetR() []byte {
	if m != nil {
		return m.R
	}
	return nil
}

type ECGroupElement struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	Y []byte `protobuf:"bytes,2,opt,name=Y,proto3" json:"Y,omitempty"`
}

func (m *ECGroupElement) Reset()                    { *m = ECGroupElement{} }
func (m *ECGroupElement) String() string            { return proto.CompactTextString(m) }
func (*ECGroupElement) ProtoMessage()               {}
func (*ECGroupElement) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *ECGroupElement) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *ECGroupElement) GetY() []byte {
	if m != nil {
		return m.Y
	}
	return nil
}

type SchnorrProofRandomData struct {
	X []byte `protobuf:"bytes,1,opt,name=X,proto3" json:"X,omitempty"`
	A []byte `protobuf:"bytes,2,opt,name=A,proto3" json:"A,omitempty"`
	B []byte `protobuf:"bytes,3,opt,name=B,proto3" json:"B,omitempty"`
}

func (m *SchnorrProofRandomData) Reset()                    { *m = SchnorrProofRandomData{} }
func (m *SchnorrProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofRandomData) ProtoMessage()               {}
func (*SchnorrProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *SchnorrProofRandomData) GetX() []byte {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrProofRandomData) GetA() []byte {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrProofRandomData) GetB() []byte {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrECProofRandomData struct {
	X *ECGroupElement `protobuf:"bytes,1,opt,name=X" json:"X,omitempty"`
	A *ECGroupElement `protobuf:"bytes,2,opt,name=A" json:"A,omitempty"`
	B *ECGroupElement `protobuf:"bytes,3,opt,name=B" json:"B,omitempty"`
}

func (m *SchnorrECProofRandomData) Reset()                    { *m = SchnorrECProofRandomData{} }
func (m *SchnorrECProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrECProofRandomData) ProtoMessage()               {}
func (*SchnorrECProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *SchnorrECProofRandomData) GetX() *ECGroupElement {
	if m != nil {
		return m.X
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetA() *ECGroupElement {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *SchnorrECProofRandomData) GetB() *ECGroupElement {
	if m != nil {
		return m.B
	}
	return nil
}

type SchnorrProofData struct {
	Z        []byte `protobuf:"bytes,1,opt,name=Z,proto3" json:"Z,omitempty"`
	Trapdoor []byte `protobuf:"bytes,2,opt,name=Trapdoor,proto3" json:"Trapdoor,omitempty"`
}

func (m *SchnorrProofData) Reset()                    { *m = SchnorrProofData{} }
func (m *SchnorrProofData) String() string            { return proto.CompactTextString(m) }
func (*SchnorrProofData) ProtoMessage()               {}
func (*SchnorrProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *SchnorrProofData) GetZ() []byte {
	if m != nil {
		return m.Z
	}
	return nil
}

func (m *SchnorrProofData) GetTrapdoor() []byte {
	if m != nil {
		return m.Trapdoor
	}
	return nil
}

type CSPaillierSecretKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	X1                   []byte `protobuf:"bytes,3,opt,name=X1,proto3" json:"X1,omitempty"`
	X2                   []byte `protobuf:"bytes,4,opt,name=X2,proto3" json:"X2,omitempty"`
	X3                   []byte `protobuf:"bytes,5,opt,name=X3,proto3" json:"X3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierSecretKey) Reset()                    { *m = CSPaillierSecretKey{} }
func (m *CSPaillierSecretKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierSecretKey) ProtoMessage()               {}
func (*CSPaillierSecretKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *CSPaillierSecretKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierSecretKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX1() []byte {
	if m != nil {
		return m.X1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX2() []byte {
	if m != nil {
		return m.X2
	}
	return nil
}

func (m *CSPaillierSecretKey) GetX3() []byte {
	if m != nil {
		return m.X3
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierSecretKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierSecretKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierSecretKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type CSPaillierPubKey struct {
	N                    []byte `protobuf:"bytes,1,opt,name=N,proto3" json:"N,omitempty"`
	G                    []byte `protobuf:"bytes,2,opt,name=G,proto3" json:"G,omitempty"`
	Y1                   []byte `protobuf:"bytes,3,opt,name=Y1,proto3" json:"Y1,omitempty"`
	Y2                   []byte `protobuf:"bytes,4,opt,name=Y2,proto3" json:"Y2,omitempty"`
	Y3                   []byte `protobuf:"bytes,5,opt,name=Y3,proto3" json:"Y3,omitempty"`
	DLogP                []byte `protobuf:"bytes,6,opt,name=DLogP,proto3" json:"DLogP,omitempty"`
	DLogG                []byte `protobuf:"bytes,7,opt,name=DLogG,proto3" json:"DLogG,omitempty"`
	DLogQ                []byte `protobuf:"bytes,8,opt,name=DLogQ,proto3" json:"DLogQ,omitempty"`
	VerifiableEncGroupN  []byte `protobuf:"bytes,9,opt,name=VerifiableEncGroupN,proto3" json:"VerifiableEncGroupN,omitempty"`
	VerifiableEncGroupG1 []byte `protobuf:"bytes,10,opt,name=VerifiableEncGroupG1,proto3" json:"VerifiableEncGroupG1,omitempty"`
	VerifiableEncGroupH1 []byte `protobuf:"bytes,11,opt,name=VerifiableEncGroupH1,proto3" json:"VerifiableEncGroupH1,omitempty"`
	K                    int32  `protobuf:"varint,12,opt,name=K" json:"K,omitempty"`
	K1                   int32  `protobuf:"varint,13,opt,name=K1" json:"K1,omitempty"`
}

func (m *CSPaillierPubKey) Reset()                    { *m = CSPaillierPubKey{} }
func (m *CSPaillierPubKey) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierPubKey) ProtoMessage()               {}
func (*CSPaillierPubKey) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *CSPaillierPubKey) GetN() []byte {
	if m != nil {
		return m.N
	}
	return nil
}

func (m *CSPaillierPubKey) GetG() []byte {
	if m != nil {
		return m.G
	}
	return nil
}

func (m *CSPaillierPubKey) GetY1() []byte {
	if m != nil {
		return m.Y1
	}
	return nil
}

func (m *CSPaillierPubKey) GetY2() []byte {
	if m != nil {
		return m.Y2
	}
	return nil
}

func (m *CSPaillierPubKey) GetY3() []byte {
	if m != nil {
		return m.Y3
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogP() []byte {
	if m != nil {
		return m.DLogP
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogG() []byte {
	if m != nil {
		return m.DLogG
	}
	return nil
}

func (m *CSPaillierPubKey) GetDLogQ() []byte {
	if m != nil {
		return m.DLogQ
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupN() []byte {
	if m != nil {
		return m.VerifiableEncGroupN
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupG1() []byte {
	if m != nil {
		return m.VerifiableEncGroupG1
	}
	return nil
}

func (m *CSPaillierPubKey) GetVerifiableEncGroupH1() []byte {
	if m != nil {
		return m.VerifiableEncGroupH1
	}
	return nil
}

func (m *CSPaillierPubKey) GetK() int32 {
	if m != nil {
		return m.K
	}
	return 0
}

func (m *CSPaillierPubKey) GetK1() int32 {
	if m != nil {
		return m.K1
	}
	return 0
}

type CSPaillierOpening struct {
	U     []byte `protobuf:"bytes,1,opt,name=U,proto3" json:"U,omitempty"`
	E     []byte `protobuf:"bytes,2,opt,name=E,proto3" json:"E,omitempty"`
	V     []byte `protobuf:"bytes,3,opt,name=V,proto3" json:"V,omitempty"`
	Delta []byte `protobuf:"bytes,4,opt,name=Delta,proto3" json:"Delta,omitempty"`
	Label []byte `protobuf:"bytes,5,opt,name=Label,proto3" json:"Label,omitempty"`
	L     []byte `protobuf:"bytes,6,opt,name=L,proto3" json:"L,omitempty"`
}

func (m *CSPaillierOpening) Reset()                    { *m = CSPaillierOpening{} }
func (m *CSPaillierOpening) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierOpening) ProtoMessage()               {}
func (*CSPaillierOpening) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *CSPaillierOpening) GetU() []byte {
	if m != nil {
		return m.U
	}
	return nil
}

func (m *CSPaillierOpening) GetE() []byte {
	if m != nil {
		return m.E
	}
	return nil
}

func (m *CSPaillierOpening) GetV() []byte {
	if m != nil {
		return m.V
	}
	return nil
}

func (m *CSPaillierOpening) GetDelta() []byte {
	if m != nil {
		return m.Delta
	}
	return nil
}

func (m *CSPaillierOpening) GetLabel() []byte {
	if m != nil {
		return m.Label
	}
	return nil
}

func (m *CSPaillierOpening) GetL() []byte {
	if m != nil {
		return m.L
	}
	return nil
}

type CSPaillierProofRandomData struct {
	U1     []byte `protobuf:"bytes,1,opt,name=U1,proto3" json:"U1,omitempty"`
	E1     []byte `protobuf:"bytes,2,opt,name=E1,proto3" json:"E1,omitempty"`
	V1     []byte `protobuf:"bytes,3,opt,name=V1,proto3" json:"V1,omitempty"`
	Delta1 []byte `protobuf:"bytes,4,opt,name=Delta1,proto3" json:"Delta1,omitempty"`
	L1     []byte `protobuf:"bytes,5,opt,name=L1,proto3" json:"L1,omitempty"`
}

func (m *CSPaillierProofRandomData) Reset()                    { *m = CSPaillierProofRandomData{} }
func (m *CSPaillierProofRandomData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofRandomData) ProtoMessage()               {}
func (*CSPaillierProofRandomData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *CSPaillierProofRandomData) GetU1() []byte {
	if m != nil {
		return m.U1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetE1() []byte {
	if m != nil {
		return m.E1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetV1() []byte {
	if m != nil {
		return m.V1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetDelta1() []byte {
	if m != nil {
		return m.Delta1
	}
	return nil
}

func (m *CSPaillierProofRandomData) GetL1() []byte {
	if m != nil {
		return m.L1
	}
	return nil
}

type CSPaillierProofData struct {
	RTilde      []byte `protobuf:"bytes,1,opt,name=RTilde,proto3" json:"RTilde,omitempty"`
	RTildeIsNeg bool   `protobuf:"varint,2,opt,name=RTildeIsNeg" json:"RTildeIsNeg,omitempty"`
	STilde      []byte `protobuf:"bytes,3,opt,name=STilde,proto3" json:"STilde,omitempty"`
	STildeIsNeg bool   `protobuf:"varint,4,opt,name=STildeIsNeg" json:"STildeIsNeg,omitempty"`
	MTilde      []byte `protobuf:"bytes,5,opt,name=MTilde,proto3" json:"MTilde,omitempty"`
	MTildeIsNeg bool   `protobuf:"varint,6,opt,name=MTildeIsNeg" json:"MTildeIsNeg,omitempty"`
}

func (m *CSPaillierProofData) Reset()                    { *m = CSPaillierProofData{} }
func (m *CSPaillierProofData) String() string            { return proto.CompactTextString(m) }
func (*CSPaillierProofData) ProtoMessage()               {}
func (*CSPaillierProofData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *CSPaillierProofData) GetRTilde() []byte {
	if m != nil {
		return m.RTilde
	}
	return nil
}

func (m *CSPaillierProofData) GetRTildeIsNeg() bool {
	if m != nil {
		return m.RTildeIsNeg
	}
	return false
}

func (m *CSPaillierProofData) GetSTilde() []byte {
	if m != nil {
		return m.STilde
	}
	return nil
}

func (m *CSPaillierProofData) GetSTildeIsNeg() bool {
	if m != nil {
		return m.STildeIsNeg
	}
	return false
}

func (m *CSPaillierProofData) GetMTilde() []byte {
	if m != nil {
		return m.MTilde
	}
	return nil
}

func (m *CSPaillierProofData) GetMTildeIsNeg() bool {
	if m != nil {
		return m.MTildeIsNeg
	}
	return false
}

func init() {
	proto.RegisterType((*Message)(nil), "comm.Message")
	proto.RegisterType((*EmptyMsg)(nil), "comm.EmptyMsg")
	proto.RegisterType((*Status)(nil), "comm.Status")
	proto.RegisterType((*BigInt)(nil), "comm.BigInt")
	proto.RegisterType((*PedersenFirst)(nil), "comm.PedersenFirst")
	proto.RegisterType((*PedersenDecommitment)(nil), "comm.PedersenDecommitment")
	proto.RegisterType((*ECGroupElement)(nil), "comm.ECGroupElement")
	proto.RegisterType((*SchnorrProofRandomData)(nil), "comm.SchnorrProofRandomData")
	proto.RegisterType((*SchnorrECProofRandomData)(nil), "comm.SchnorrECProofRandomData")
	proto.RegisterType((*SchnorrProofData)(nil), "comm.SchnorrProofData")
	proto.RegisterType((*CSPaillierSecretKey)(nil), "comm.CSPaillierSecretKey")
	proto.RegisterType((*CSPaillierPubKey)(nil), "comm.CSPaillierPubKey")
	proto.RegisterType((*CSPaillierOpening)(nil), "comm.CSPaillierOpening")
	proto.RegisterType((*CSPaillierProofRandomData)(nil), "comm.CSPaillierProofRandomData")
	proto.RegisterType((*CSPaillierProofData)(nil), "comm.CSPaillierProofData")
	proto.RegisterEnum("comm.SchemaType", SchemaType_name, SchemaType_value)
	proto.RegisterEnum("comm.SchemaVariant", SchemaVariant_name, SchemaVariant_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Protocol service

type ProtocolClient interface {
	Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error)
}

type protocolClient struct {
	cc *grpc.ClientConn
}

func NewProtocolClient(cc *grpc.ClientConn) ProtocolClient {
	return &protocolClient{cc}
}

func (c *protocolClient) Run(ctx context.Context, opts ...grpc.CallOption) (Protocol_RunClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Protocol_serviceDesc.Streams[0], c.cc, "/comm.Protocol/Run", opts...)
	if err != nil {
		return nil, err
	}
	x := &protocolRunClient{stream}
	return x, nil
}

type Protocol_RunClient interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type protocolRunClient struct {
	grpc.ClientStream
}

func (x *protocolRunClient) Send(m *Message) error {
	return x.ClientStream.SendMsg(m)
}

func (x *protocolRunClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Protocol service

type ProtocolServer interface {
	Run(Protocol_RunServer) error
}

func RegisterProtocolServer(s *grpc.Server, srv ProtocolServer) {
	s.RegisterService(&_Protocol_serviceDesc, srv)
}

func _Protocol_Run_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProtocolServer).Run(&protocolRunServer{stream})
}

type Protocol_RunServer interface {
	Send(*Message) error
	Recv() (*Message, error)
	grpc.ServerStream
}

type protocolRunServer struct {
	grpc.ServerStream
}

func (x *protocolRunServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *protocolRunServer) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Protocol_serviceDesc = grpc.ServiceDesc{
	ServiceName: "comm.Protocol",
	HandlerType: (*ProtocolServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Run",
			Handler:       _Protocol_Run_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "msgs.proto",
}

func init() { proto.RegisterFile("msgs.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1073 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe4, 0x56, 0xdd, 0x6e, 0xe2, 0x46,
	0x14, 0x8e, 0x49, 0xf8, 0xc9, 0x09, 0xb0, 0xde, 0x49, 0x9a, 0x3a, 0xd1, 0x6e, 0xbb, 0xf2, 0x45,
	0x95, 0xae, 0xaa, 0x68, 0x4d, 0xd4, 0x9b, 0x6a, 0x2f, 0x0a, 0xc4, 0x0b, 0x88, 0x9f, 0x90, 0x71,
	0x82, 0x42, 0x6e, 0xa8, 0x31, 0x13, 0x6a, 0x09, 0x6c, 0xcb, 0x36, 0xad, 0xf2, 0x02, 0x7d, 0xb1,
	0xbe, 0x44, 0xa5, 0xbe, 0x40, 0x1f, 0xa3, 0xf3, 0x67, 0x30, 0x7f, 0x52, 0xef, 0x7b, 0x37, 0xdf,
	0x39, 0xe7, 0xfb, 0x66, 0xfc, 0xcd, 0xcc, 0xf1, 0x00, 0xcc, 0xa3, 0x69, 0x74, 0x1d, 0x84, 0x7e,
	0xec, 0xa3, 0x23, 0xc7, 0x9f, 0xcf, 0xf5, 0x7f, 0xf2, 0x90, 0xef, 0x92, 0x28, 0xb2, 0xa7, 0x04,
	0x5d, 0x41, 0x2e, 0x72, 0x7e, 0x25, 0x73, 0x5b, 0x53, 0x3e, 0x28, 0x57, 0xe5, 0x8a, 0x7a, 0xcd,
	0x4a, 0xae, 0x2d, 0x1e, 0x7b, 0x78, 0x0d, 0x08, 0x96, 0x79, 0xf4, 0x13, 0x94, 0xc5, 0x68, 0xf4,
	0x9b, 0x1d, 0xba, 0xb6, 0x17, 0x6b, 0x19, 0xce, 0x38, 0x4d, 0x33, 0x06, 0x22, 0x85, 0x4b, 0x51,
	0x1a, 0xa2, 0xef, 0x20, 0x4b, 0xe6, 0x41, 0xfc, 0xaa, 0x1d, 0x52, 0xca, 0x49, 0xa5, 0x2c, 0x28,
	0x26, 0x0b, 0x75, 0xa3, 0x69, 0xf3, 0x00, 0x8b, 0x34, 0xad, 0xcb, 0x8d, 0xdd, 0xa9, 0x4b, 0xb5,
	0x8f, 0x78, 0x61, 0x51, 0x14, 0xd6, 0xdc, 0x69, 0xcb, 0x8b, 0x69, 0x99, 0xcc, 0xa2, 0x9f, 0x41,
	0x25, 0xce, 0x68, 0x1a, 0xfa, 0x8b, 0x60, 0x44, 0x66, 0x64, 0x4e, 0x28, 0x23, 0xcb, 0x19, 0x67,
	0x52, 0xba, 0xde, 0x60, 0x49, 0x53, 0xe4, 0x28, 0xb3, 0x4c, 0x9c, 0x74, 0x84, 0xcd, 0x14, 0xc5,
	0x76, 0xbc, 0x88, 0xb4, 0x5c, 0x7a, 0x26, 0x8b, 0xc7, 0xd8, 0x4c, 0x22, 0x8b, 0x3e, 0x43, 0x39,
	0x20, 0x13, 0x12, 0x46, 0xc4, 0x1b, 0xbd, 0xb8, 0x61, 0x14, 0x6b, 0x79, 0x5e, 0x2f, 0xbf, 0xba,
	0x2f, 0x73, 0x5f, 0x58, 0x8a, 0xd2, 0x4a, 0x41, 0x3a, 0x80, 0xee, 0xe1, 0xab, 0x25, 0x7b, 0x42,
	0x18, 0xc3, 0x8d, 0xf9, 0x62, 0x0b, 0x5c, 0xe4, 0x72, 0x5d, 0xe4, 0x36, 0x55, 0x41, 0xb5, 0xce,
	0x82, 0x1d, 0x71, 0xf4, 0x05, 0x10, 0xf5, 0xd6, 0xf3, 0xc3, 0x70, 0x44, 0xf7, 0xd4, 0x7f, 0x19,
	0x4d, 0xec, 0xd8, 0xd6, 0x8e, 0xb9, 0xde, 0xf9, 0x72, 0x2b, 0x58, 0xbe, 0xcf, 0xd2, 0xb7, 0x34,
	0x4b, 0xb5, 0xd4, 0x68, 0x23, 0x86, 0x86, 0x70, 0xb1, 0xae, 0x13, 0xda, 0xde, 0xc4, 0x9f, 0x0b,
	0x39, 0xe0, 0x72, 0xef, 0xb6, 0xe5, 0x30, 0x2f, 0x92, 0xa2, 0xe7, 0xd1, 0xce, 0x0c, 0xfa, 0x05,
	0xde, 0x25, 0xd2, 0x74, 0x97, 0xb6, 0xd5, 0x4f, 0xb8, 0xfa, 0x37, 0x6b, 0xea, 0x66, 0x7d, 0x5b,
	0x5f, 0x93, 0x2a, 0xa6, 0xb3, 0x39, 0x43, 0x0b, 0x4e, 0x9d, 0x68, 0x14, 0xd8, 0xee, 0x6c, 0xe6,
	0x92, 0x70, 0xe4, 0x07, 0xc4, 0x73, 0xbd, 0xa9, 0x56, 0xe4, 0xc2, 0x5f, 0x0b, 0xe1, 0xba, 0xd5,
	0x97, 0xf9, 0x3b, 0x91, 0xa6, 0x8a, 0x6f, 0x9d, 0x68, 0x23, 0x88, 0xfa, 0x70, 0x9e, 0x96, 0x4a,
	0x79, 0x5a, 0xe2, 0x6a, 0x17, 0x9b, 0x6a, 0x69, 0x5b, 0x4f, 0x57, 0x7a, 0x2b, 0x67, 0x1d, 0x78,
	0xbf, 0xad, 0x98, 0xfe, 0xfe, 0x32, 0x17, 0xfe, 0x76, 0xa7, 0xf0, 0x9a, 0x01, 0x17, 0x1b, 0xf2,
	0x29, 0x07, 0x2e, 0xa1, 0xe0, 0xd0, 0xb8, 0x17, 0xb7, 0x26, 0xda, 0x1b, 0xaa, 0x97, 0xc5, 0x4b,
	0x5c, 0x3b, 0x86, 0xbc, 0xe3, 0x7b, 0x31, 0x05, 0x3a, 0x40, 0x21, 0xb9, 0x65, 0xba, 0x0e, 0x39,
	0x71, 0xbc, 0x91, 0x06, 0x79, 0x6b, 0xe1, 0x38, 0xb4, 0x05, 0xf0, 0x5b, 0x5f, 0xc0, 0x09, 0xd4,
	0x35, 0xc8, 0x89, 0xcb, 0x86, 0xca, 0x90, 0x79, 0x32, 0x78, 0xba, 0x88, 0xe9, 0x48, 0x7f, 0x0f,
	0xa5, 0xb5, 0xc3, 0x8e, 0x8a, 0xa0, 0x34, 0x65, 0x5e, 0x69, 0xea, 0x15, 0x38, 0xdb, 0x75, 0x8c,
	0x59, 0xd5, 0x53, 0x52, 0xf5, 0xc4, 0x10, 0xe6, 0x6d, 0x83, 0x22, 0xac, 0xff, 0x00, 0xe5, 0xf5,
	0x7b, 0xba, 0x5d, 0x3d, 0x4c, 0xaa, 0x87, 0x7a, 0x0d, 0xce, 0x77, 0x9f, 0xc4, 0x6d, 0x56, 0x35,
	0x61, 0x55, 0x19, 0xaa, 0xf1, 0xae, 0x43, 0x51, 0x4d, 0xff, 0x43, 0x01, 0x6d, 0xdf, 0x81, 0x43,
	0x7a, 0x22, 0xb3, 0xa7, 0x8b, 0x30, 0x71, 0x3d, 0x11, 0xdf, 0x5b, 0x53, 0x65, 0x35, 0x35, 0xd9,
	0xe8, 0xf6, 0xd4, 0xd4, 0xf4, 0xcf, 0xa0, 0x6e, 0xde, 0x52, 0xb6, 0xd4, 0xe7, 0xe4, 0x33, 0x9e,
	0xd9, 0x06, 0x3f, 0x84, 0x76, 0x30, 0xf1, 0xfd, 0x50, 0x7e, 0xcd, 0x12, 0xeb, 0x7f, 0x67, 0xe0,
	0x74, 0x75, 0x6e, 0x2c, 0xe2, 0x84, 0x24, 0x6e, 0x93, 0x57, 0xa6, 0xd0, 0x4b, 0x14, 0x7a, 0x0c,
	0x35, 0x12, 0x23, 0x1a, 0x72, 0x3f, 0x0f, 0x93, 0xfd, 0xe4, 0xb8, 0xc2, 0xdb, 0x2c, 0xc3, 0x15,
	0x8e, 0x6f, 0x78, 0x13, 0x65, 0xf8, 0x06, 0x9d, 0x41, 0xf6, 0xb6, 0xe3, 0x4f, 0xfb, 0xbc, 0x3f,
	0x16, 0xb1, 0x00, 0x49, 0xb4, 0xc1, 0xbb, 0xa0, 0x8c, 0x36, 0x92, 0xe8, 0x3d, 0x6f, 0x6b, 0x32,
	0x7a, 0x8f, 0x3e, 0xc1, 0xe9, 0x80, 0x84, 0xee, 0x8b, 0x6b, 0x8f, 0x67, 0xc4, 0xf4, 0x44, 0xff,
	0xed, 0xf1, 0x56, 0x55, 0xc4, 0xbb, 0x52, 0x88, 0x1e, 0xa2, 0xed, 0x70, 0xc3, 0xe0, 0xed, 0xa8,
	0x88, 0x77, 0xe6, 0x76, 0x73, 0x9a, 0x06, 0x6f, 0x32, 0x3b, 0x39, 0x4d, 0x83, 0x39, 0xd3, 0xe6,
	0xcd, 0x22, 0x8b, 0x95, 0x36, 0xfb, 0xf2, 0xb6, 0xc1, 0x6f, 0x7b, 0x16, 0xd3, 0x91, 0xfe, 0x57,
	0x06, 0xd4, 0xd4, 0xad, 0x5c, 0x8c, 0xff, 0x83, 0xb5, 0xc3, 0xa5, 0xb5, 0x43, 0x6e, 0xed, 0x70,
	0x69, 0xed, 0x90, 0x5b, 0x3b, 0x5c, 0x5a, 0x3b, 0xfc, 0x3f, 0x5b, 0xfb, 0x3b, 0xbc, 0xdd, 0x6a,
	0xcb, 0x8c, 0xf2, 0x98, 0x58, 0xfb, 0xc8, 0x90, 0x99, 0x58, 0x6b, 0x32, 0x34, 0x48, 0xae, 0xef,
	0x80, 0x9b, 0x41, 0x66, 0xb4, 0x83, 0x1e, 0x49, 0x33, 0x18, 0x60, 0xd1, 0x8e, 0x3d, 0x26, 0x33,
	0xe9, 0xb0, 0x00, 0x8c, 0xd9, 0x91, 0x06, 0x2b, 0x1d, 0x3d, 0x82, 0x8b, 0xbd, 0x8d, 0x96, 0xad,
	0xf2, 0x71, 0xd9, 0xea, 0x1e, 0xf9, 0xfe, 0x99, 0x86, 0x5c, 0x03, 0x1d, 0x31, 0x3c, 0x58, 0xee,
	0xef, 0xc0, 0x40, 0xe7, 0x90, 0xe3, 0x33, 0x1b, 0x72, 0x1d, 0x12, 0xb1, 0xba, 0x8e, 0x91, 0xec,
	0x73, 0xc7, 0xd0, 0xff, 0x54, 0xd2, 0xd7, 0x74, 0x75, 0xd1, 0x29, 0x1f, 0x3f, 0xb8, 0xb3, 0x09,
	0x91, 0x73, 0x4a, 0x84, 0x3e, 0xc0, 0x89, 0x18, 0xb5, 0xa2, 0x1e, 0x99, 0xf2, 0x05, 0x14, 0x70,
	0x3a, 0xc4, 0x98, 0x96, 0x60, 0x8a, 0xd5, 0x48, 0xc4, 0x98, 0x56, 0x8a, 0x79, 0x24, 0x98, 0xd6,
	0x3a, 0xb3, 0x2b, 0x98, 0x62, 0x7d, 0x12, 0x31, 0x66, 0x37, 0xc5, 0xcc, 0x09, 0x66, 0x2a, 0xf4,
	0xf1, 0x09, 0x60, 0xf5, 0x1a, 0xa4, 0xb6, 0x16, 0xfa, 0xe6, 0xad, 0x89, 0x2d, 0xb3, 0xa7, 0x1e,
	0xa0, 0x37, 0x70, 0x92, 0xa0, 0x91, 0x59, 0x57, 0x15, 0x74, 0x42, 0xff, 0x2c, 0xf5, 0x66, 0xef,
	0x0e, 0x63, 0x35, 0x43, 0xfd, 0x00, 0x09, 0x58, 0xf2, 0x90, 0x61, 0x6a, 0x47, 0xb5, 0xd5, 0xe9,
	0xb4, 0x4c, 0xac, 0x1e, 0x7d, 0xbc, 0x86, 0xd2, 0xda, 0xab, 0x11, 0x1d, 0x43, 0xd6, 0x6a, 0x35,
	0xba, 0x55, 0xaa, 0x9c, 0x87, 0xc3, 0xe7, 0x76, 0x9f, 0x2a, 0xd2, 0x18, 0x1d, 0xdc, 0xb5, 0xd5,
	0x4c, 0xe5, 0x47, 0x3a, 0x37, 0x7b, 0xc6, 0x3a, 0xfe, 0x0c, 0x7d, 0x0f, 0x87, 0x78, 0xe1, 0xa1,
	0x92, 0x68, 0xb0, 0xf2, 0x35, 0x7b, 0xb9, 0x0e, 0xf5, 0x83, 0x2b, 0xe5, 0x93, 0x32, 0xce, 0xf1,
	0xb7, 0xef, 0xcd, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xf6, 0x0f, 0xcd, 0x09, 0x0b, 0x00,
	0x00,
}
